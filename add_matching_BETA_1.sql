ALTER TABLE ADD_IN COMPRESS;

CREATE TABLE SECOND_A AS SELECT DISTINCT ID, CURRENT_LINE1, CURRENT_LINE2,CURRENT_LINE3,
H3_4_P,H3_6_P,H3_7_P,H3_8_P, H3_10_P,
ADD_STRING_WORKING,ADDRESS_STRING ,ADD_NUM,BUILD_NO,SUB_UNIT,NEIGHBOURS,NEAR_NEIGHBOURS,FAR_NEIGHBOURS,VFAR_NEIGHBOURS,
replace(ADD_STRING_WORKING,' ','') as ADD_NO_SPACE,
--regexp_substr(ADDRESS_STRING,'(LEVEL|LVL|FLOOR|FLR|UNIT|ROOM|RM|FLAT|FLT|APT|APPARTMENT|SUITE)+.*[[:digit:]]|[[:digit:]].*[[:digit:]][[:alpha:]]*|[[:digit:]]+') AS ADD_NUM,
WORD_ONE,WORD_TWO,WORD_THREE,WORD_FOUR,WORD_FIVE,WORD_SIX,WORD_ONE_M,WORD_TWO_M,WORD_THREE_M,WORD_FOUR_M,WORD_FIVE_M,WORD_SIX_M 
FROM ADD_IN ;
--where ADD_IN.ID  NOT IN (SELECT ID  FROM  UPRNSEEDING_65_5) ;
--AND rownum <= 350000; optional

ALTER TABLE SECOND_A COMPRESS;
--SECOND HALF OF RUN
--DELETE FROM SECOND_A
--WHERE EXISTS( SELECT 1 FROM UPRNSEEDING_65_3 Where SECOND_A.ID = UPRNSEEDING_65_3.ID);
--commit;

ALTER TABLE SECOND_A ADD STAGE varchar(250);
------------------
--random selection
---------------------
--CREATE TABLE RANDOM AS SELECT * FROM SECOND_A SAMPLE(1); --1% sample

--UPDATE SECOND_A SET ADD_NUM = replace(SECOND_A.ADD_NUM,'-', '/');
--------------------------
--INCOMING DATA CLEANING--
--------------------------
alter table "MARTIR03"."SECOND_A" parallel 12;
commit;

ALTER TABLE AD_BASE
ADD range_lower varchar(250);
ALTER TABLE AD_BASE
ADD range_upper varchar(250);

UPDATE AD_BASE SET range_LOWER =CAST(regexp_replace(regexp_substr(AD_BASE.ADD_num, '[^/]+[0-9]', 1, 1), '[^0-9]','')AS INT);
UPDATE AD_BASE SET range_upper =CAST(regexp_replace(regexp_substr(AD_BASE.ADD_num, '[^/]+[0-9]', 1, 2), '[^0-9]','')AS INT);

ALTER TABLE AD_BASE
ADD range_lower2 varchar(250);
ALTER TABLE AD_BASE
ADD range_upper2 varchar(250);

UPDATE AD_BASE SET range_LOWER2 =CAST(regexp_replace(regexp_substr(AD_BASE.build_no, '[^-]+[0-9]', 1, 1), '[^0-9]','')AS INT);
UPDATE AD_BASE SET range_upper2 =CAST(regexp_replace(regexp_substr(AD_BASE.build_no, '[^-]+[0-9]', 1, 2), '[^0-9]','')AS INT);


ALTER TABLE SECOND_A
ADD range_lower varchar(250);
ALTER TABLE SECOND_A
ADD range_upper varchar(250);

UPDATE SECOND_A SET range_LOWER =CAST(regexp_replace(regexp_substr(second_a.ADD_num, '[^/]+[0-9]', 1, 1), '[^0-9]','')AS INT);
UPDATE SECOND_A SET range_upper =CAST(regexp_replace(regexp_substr(second_a.ADD_num, '[^/]+[0-9]', 1, 2), '[^0-9]','')AS INT);

ALTER TABLE SECOND_A
ADD range_lower2 varchar(250);
ALTER TABLE SECOND_A
ADD range_upper2 varchar(250);

UPDATE SECOND_A SET BUILD_NO =Regexp_replace(second_a.BUILD_NO,'[/]','-');
UPDATE SECOND_A SET range_LOWER2 =CAST(regexp_replace(regexp_substr(second_a.BUILD_NO, '[^- ]+[0-9]', 1, 1), '[^0-9]','')AS INT);
UPDATE SECOND_A SET range_upper2 =CAST(regexp_replace(regexp_substr(second_a.BUILD_NO, '[^- ]+[0-9]', 1, 2), '[^0-9]','')AS INT);


--UPDATE second_a SET NUM = trim(leading FROM SECOND_A.ADD_NUM);

UPDATE SECOND_A SET CURRENT_LINE1 = regexp_replace(SECOND_A.CURRENT_LINE1,' ROOM | FLAT | RM | FLT | FT | SUITE | BLOCK | C/O ', ' ');
UPDATE SECOND_A SET ADDRESS_STRING = regexp_replace(SECOND_A.ADDRESS_STRING,' ROOM | FLAT | RM | FLT | FT | SUITE | BLOCK | C/O ', ' ');
UPDATE SECOND_A SET CURRENT_LINE1 = regexp_replace(SECOND_A.CURRENT_LINE1,' CRT | CT ', ' COURT ');
UPDATE SECOND_A SET ADDRESS_STRING = regexp_replace(SECOND_A.ADDRESS_STRING,' CRT | CT ', ' COURT ');

UPDATE SECOND_A SET CURRENT_LINE1 = regexp_replace(SECOND_A.CURRENT_LINE1,' TCE  | TERR  | TER ', ' TERRACE ');
UPDATE SECOND_A SET ADDRESS_STRING = regexp_replace(SECOND_A.ADDRESS_STRING,' TCE | TERR | TER ', ' TERRACE ');

UPDATE SECOND_A SET CURRENT_LINE1 = regexp_replace(SECOND_A.CURRENT_LINE1,' GDNS ', ' GARDENS ');
UPDATE SECOND_A SET ADDRESS_STRING = regexp_replace(SECOND_A.ADDRESS_STRING,' GDNS ', ' GARDENS ');

UPDATE SECOND_A SET CURRENT_LINE1 = regexp_replace(SECOND_A.CURRENT_LINE1,' HSE ', ' HOUSE ');
UPDATE SECOND_A SET ADDRESS_STRING = regexp_replace(SECOND_A.ADDRESS_STRING,' HSE ', ' HOUSE ');

--UPDATE second_a SET ADD_NUM = regexp_substr(second_a.ADDRESS_STRING,'(LEVEL|LVL|FLOOR|FLR|UNIT|ROOM|RM|FLAT|FLT|APT|APPARTMENT|SUITE)+.*[[:digit:]]|[[:digit:]].*[[:digit:]][[:alpha:]]*|[[:digit:]]+');

--UPDATE second_a SET ADD_NUM = replace(SECOND_A.add_num, '^[[:space:]]', '') ;
--UPDATE second_a SET ADD_NUM = trim(leading FROM SECOND_A.add_num);
--UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'-', '/');

--UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,',', ' ');
--UPDATE SECOND_A SET add_num = regexp_replace(SECOND_A.add_num, '[[:space:]]{2,}', ' ') ;

--UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'[:space:]//[:space:]', '/');
--UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'//', '/');

UPDATE SECOND_A SET ADDRESS_STRING = replace(SECOND_A.ADDRESS_STRING,',', ' ');
UPDATE SECOND_A SET CURRENT_LINE1 = replace(SECOND_A.CURRENT_LINE1 ,',', ' ');
UPDATE SECOND_A SET CURRENT_LINE2 = replace(SECOND_A.CURRENT_LINE2,',', ' ');
UPDATE SECOND_A SET CURRENT_LINE3 = replace(SECOND_A.CURRENT_LINE3,',', ' ');

UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,',', ' ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'[:space:]/[:space:]', '/');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'/[:space:]', '/');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'[:space:]/', '/');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'0[:space:]/[:space:]R', '0/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'1[:space:]/[:space:]R', '1/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'2[:space:]/[:space:]R', '2/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'3[:space:]/[:space:]R', '3/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'4[:space:]/[:space:]R', '4/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'1[:space:]/[:space:]L', '1/1 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'2[:space:]/[:space:]L', '2/1 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'3[:space:]/[:space:]L', '3/1 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'4[:space:]/[:space:]L', '4/1 ');

UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'0/R ', '0/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'1/R ', '1/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'2/R ', '2/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'3/R ', '3/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'4/R ', '4/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'1/L ', '1/1 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'2/L ', '2/1 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'3/L ', '3/1 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'4/L ', '4/1 ');

UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'0[:space:]/[:space:]2 ', '0/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'0[:space:]/[:space:]1 ', '0/1 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'1[:space:]/[:space:]2 ', '1/2 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'1[:space:]/[:space:]1 ', '1/1 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'2[:space:]/[:space:]2 ', '2/2 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'2[:space:]/[:space:]1 ', '2/1 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'3[:space:]/[:space:]2 ', '3/2 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'3[:space:]/[:space:]1 ', '3/1 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'4[:space:]/[:space:]2 ', '4/2 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'4[:space:]/[:space:]1 ', '4/1 ');

UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'0 2 ', '0/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'0 1 ', '0/1 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'1 2 ', '1/2 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'1 1 ', '1/1 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'2 2 ', '2/2 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'2 1 ', '2/1 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'3 2 ', '3/2 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'3 1 ', '3/1 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'4 2 ', '4/2 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'4 1 ', '4/1 ');

UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'0F2 ', '0/2 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'0F1 ', '0/1 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'1F2 ', '1/2 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'1F1 ', '1/1 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'2F2 ', '2/2 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'2F1 ', '2/1 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'3F2 ', '3/2 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'3F1 ', '3/1 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'4F2 ', '4/2 '); 
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'4F1 ', '4/1 ');
UPDATE SECOND_A SET add_num = replace(SECOND_A.add_num,'G/', '0/');


--UPDATE SECOND_A SET add_num = regexp_replace(SECOND_A.add_num,'[A-Z]+?', ' '); -- NEED TO ALTRER TO ONLY REMOVE ALPHA STRINGS OF LEN 2 + ISSUE TO SOLVE YET

---NEW IDEAS NEED TESTING--

--NEW LINE TO TEST TO GET ALPHA NUMBERS ONLY
--[0-9](A-Z?){1}$
--NEW REGEX LINE FOR ROOM NUMBER ONLY
--[ROOM|RM][:space:][0-9](A-Z?){1}$
--NEW REGEX LINE FOR FLAT NUMEBR
--[FLAT|FLT|F][:space:][0-9](A-Z?){1}$
--NEW REGEX LINE FOR FLOOR OR LEVEL OR UNIT NUMEBRS
--[UNIT|FLR|FLOOR|LEVEL|LVL][:space:][0-9](A-Z?){1}$

--ALTER TABLE SECOND_A
--ADD BUILD_NO varchar(250);
--ALTER TABLE SECOND_A
--ADD SUB_UNIT varchar(250);
--UPDATE SECOND_A SET SUB_UNIT =regexp_substr(add_num, '[^ ]+', 1, 1);
--UPDATE SECOND_A SET BUILD_NO =regexp_substr(add_num, '[^ ]+', 1, 2);

--------------------------------------------------------------------
--MATCHING LOGIC LINES 1 & 2 MATCH PRECISELY AND BOTH OBJECTS WITH H3_6 TILE MAX SCORE ACCEPTED 
--IMPROVEMENT CHECK IF DENSE RANKING
create table results as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  ad_base.post_town,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) 
 - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
 WHERE SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2=AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2 
 AND AD_BASE.H3_6=SECOND_A.H3_6_p;
 
UPDATE RESULTS SET STAGE= '1';

CREATE TABLE RESULTSA AS SELECT DISTINCT ID, STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,post_town,SCORE1 FROM(
SELECT ID, STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,post_town,SCORE1,
       MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE
         FROM RESULTS)
   WHERE SCORE1=MAX_SCORE
 ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
 
ALTER TABLE RESULTSA COMPRESS;
 
--
DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTSA Where SECOND_A.ID = RESULTSA.ID);
commit;
--
drop table "MARTIR03"."RESULTS";
--

--MATCHING LOGIC LINES 1 & 2 MATCH TO WITH 0.85 JW SCORE AND BOTH OBJECTS WITH H3_10 TILE MAX SCORE ACCEPTED 
--, ADDRESS NUMERICAL ELEMENTS MATCH ,STREET DESCRIPTION IS IN BOTH ADDRESS STRINGS
--SECOND QUERY USES STREET ABBR AND SAME LOGIC
--IMPROVEMENT CHECK IF H3_10 IS OPTIMAL CONSIDER SETTLEMENT LOGIC AND SUB QUERY FOR RURAL AREAS
create table results1I as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
  AD_BASE.UPRN,
   AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_nopc,
  AD_BASE.DESCRIPTION,
 (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) 
 - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
 WHERE 
 AD_BASE.H3_10=SECOND_A.H3_10_p 
  AND AD_BASE.ADD_NUM = SECOND_A.ADD_NUM
 AND instr(SECOND_A.ADDRESS_STRING,AD_BASE.DESCRIPTION,1,1)>0
--AND instr(SECOND_A.ADDRESS_STRING,ad_base.ABBR_STREET1,1,1)>0
AND UTL_MATCH.JARO_WINKLER(SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2, AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2)>0.85;

UPDATE results1I SET STAGE= '1I'; 

create table RESULTS1II as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
  AD_BASE.UPRN,
   AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  AD_BASE.DESCRIPTION,
 (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2))-
 UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE 
AD_BASE.H3_10=SECOND_A.H3_10_p 
AND AD_BASE.ADD_NUM = SECOND_A.ADD_NUM
AND instr(SECOND_A.ADDRESS_STRING,ad_base.ABBR_STREET1,1,1)>0
AND UTL_MATCH.JARO_WINKLER(SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2, AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2)>0.85; 

UPDATE results1II SET STAGE= '1II'; 


 CREATE TABLE RESULTS1 AS 
select * from results1I
union 
select * from results1II;
 
 --PICK HIGHEST SCORE ONLY
CREATE TABLE RESULTS1A AS SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,description, MAX_SCORE FROM(
SELECT ID, STAGE, UPRN,PARENT_UPRN,ADDRESS_STRING,ADDRESS_STRING_NOPC,score1,description,
       MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE
   FROM RESULTS1)
   WHERE SCORE1 = MAX_SCORE and 
       instr(ADDRESS_STRING,description,1,1)>0
 ORDER BY ID, ADDRESS_STRING;
 --
 ALTER TABLE RESULTS1A COMPRESS;
 --
DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTS1A Where SECOND_A.id = RESULTS1A.id);
COMMIT;
drop table "MARTIR03"."RESULTS1I";
drop table "MARTIR03"."RESULTS1II";

drop table "MARTIR03"."RESULTS1";
--soundex of first words match here adddresses contain no numerical elements 
--both are with a h3_7 tile and first 2 address strings are with 0.88 JW score of each other
--match selection of highest score and street description being present. 
create table results2 as SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_7=SECOND_A.H3_7_p 
AND AD_BASE.ADD_NUM IS NULL
AND SECOND_A.ADD_NUM IS NULL
AND LENGTH(SECOND_A.CURRENT_LINE1)>3
AND SOUNDEX(regexp_substr(SECOND_A.CURRENT_LINE1, '[A-Z ]+', 1, 1))=SOUNDEX(regexp_substr(ad_base.ADDRESS_LINE_1, '[A-Z ]+', 1, 1))
AND (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2)>0.88;
  --ADD SOUNDEX
UPDATE results2 SET STAGE= '2'; 
--PICK BEST SCORE ONLY
CREATE TABLE RESULTS2A AS SELECT DISTINCT ID, STAGE,UPRN, PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, DESCRIPTION,MAX_SCORE FROM(
SELECT ID, STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, DESCRIPTION, SCORE1,
       MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE
   FROM RESULTS2)
   WHERE SCORE1 = MAX_SCORE 
   and instr(ADDRESS_STRING,description,1,1)>0
 ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
 
 ALTER TABLE RESULTS2A COMPRESS;
DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTS2A Where SECOND_A.ID = RESULTS2A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS2";
----Lines 1&2 match precisely max score accepted and where matches result in only one parent UPRN from rival options.
create table results3 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.POST_TOWN,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.POST_TOWN) as score,
  AD_BASE.ADDRESS_STRING_NOPC
FROM SECOND_A,AD_BASE
 WHERE SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2=AD_BASE.ADDRESS_LINE_1||AD_BASE.POST_TOWN;
 
 UPDATE results3 SET STAGE= '2'; 
----
CREATE TABLE RESULTS3A AS SELECT DISTINCT ID, STAGE,UPRN,ADDRESS_STRING,PARENT_UPRN,ADDRESS_STRING_NOPC,SCORE, MAX_SCORE, COUNT_P_UPRN FROM(
SELECT ID, STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,
       MAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
       DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
   FROM RESULTS3)
   WHERE SCORE = MAX_SCORE AND COUNT_P_UPRN=1
 ORDER BY ID, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS3A COMPRESS;
--
DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTS3A Where SECOND_A.ID = RESULTS3A.ID);
COMMIT;

drop table "MARTIR03"."RESULTS3";

--Numerical elements match, both entities within same h3_8 tile,lines 1& 2 and post town scored
--street name within both entities
create table results4 as SELECT DISTINCT
SECOND_A.ID,SECOND_A.STAGE,SECOND_A.ADDRESS_STRING,SECOND_A.CURRENT_LINE1,SECOND_A.CURRENT_LINE2,
SECOND_A.ADD_NUM as in_num,AD_BASE.ADD_NUM,   AD_BASE.UPRN,  AD_BASE.PARENT_UPRN,
  AD_BASE.DESCRIPTION,  AD_BASE.ADDRESS_LINE_1,  AD_BASE.ADDRESS_LINE_2,  AD_BASE.POST_TOWN,
  AD_BASE.ADDRESS_STRING_NOPC,
    (length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) 
    - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2||AD_BASE.POST_TOWN,TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2||AD_BASE.POST_TOWN) as score
FROM SECOND_A,AD_BASE
WHERE SECOND_A.H3_8_P=AD_BASE.H3_8
AND AD_BASE.ADD_NUM = SECOND_A.ADD_NUM
AND (length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2||AD_BASE.POST_TOWN,TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2||AD_BASE.POST_TOWN)>0.85
  AND (INSTR(SECOND_A.address_string ,AD_BASE.DESCRIPTION,1,1)>0 OR INSTR(SECOND_A.address_string ,ad_base.ABBR_STREET1,1,1)>0);

UPDATE results4 SET STAGE= '4'; 

CREATE TABLE RESULTS4A AS SELECT DISTINCT ID,STAGE, UPRN, PARENT_UPRN,ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE, MAX_SCORE FROM(
SELECT ID,STAGE,UPRN, PARENT_UPRN,ADDRESS_STRING,  ADDRESS_STRING_NOPC, SCORE,
       MAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE
   FROM RESULTS4)
   WHERE SCORE = MAX_SCORE 
 ORDER BY ID, ADDRESS_STRING_NOPC;
 
 ALTER TABLE RESULTS4A COMPRESS;


DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTS4A Where SECOND_A.ID = RESULTS4A.ID);
COMMIT;

drop table "MARTIR03"."RESULTS4";
----------------------------
--Both addresses are indexed to the same H3_7 tile, numerical elements match and line1 contains the street description.
----------------------------
create table results5 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_STRING_NOPC,
TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))/length(AD_BASE.ADDRESS_STRING_NOPC) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
AND AD_BASE.ADD_NUM = SECOND_A.ADD_NUM 
AND INSTR(SECOND_A.CURRENT_LINE1 ,AD_BASE.description,1,1)>0;

UPDATE results5 SET STAGE= '5'; 

CREATE TABLE RESULTS5A AS SELECT DISTINCT ID, STAGE, UPRN, PARENT_UPRN,ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID, STAGE, UPRN, PARENT_UPRN,ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,
       MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE
   FROM RESULTS5)
   WHERE SCORE1 = MAX_SCORE
 ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS5A COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTS5A Where SECOND_A.ID = RESULTS5A.ID);
COMMIT;

drop table "MARTIR03"."RESULTS5";
----------------------------------------
--both addresses are indexed to same h3_7 tile and street description is in any part of address string and numerical elements match
----------------------------------------
create table results6 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  (length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_STRING_NOPC,TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))
  /length(AD_BASE.ADDRESS_STRING_NOPC) as score,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
 AND INSTR(SECOND_A.address_string ,AD_BASE.DESCRIPTION,1,1)>0
  AND AD_BASE.ADD_NUM = SECOND_A.ADD_NUM;
  
UPDATE results6 SET STAGE= '6';   

CREATE TABLE RESULTS6A AS SELECT DISTINCT ID, STAGE,UPRN, PARENT_UPRN,ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE, MAX_SCORE FROM(
SELECT ID, STAGE, UPRN, PARENT_UPRN,ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,
       MAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE
   FROM RESULTS6)
   WHERE SCORE = MAX_SCORE
 ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS6A COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTS6A Where SECOND_A.ID = RESULTS6A.ID);
COMMIT;
--
drop table "MARTIR03"."RESULTS6";
--both addresses indexed to the same h3_8 tile and line 1 contains str abbr or street description 
--and build no = incoming numbers or adbase buidl no is null and adbase sub_uit matches incoming numerical elements
create table results7 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  UTL_MATCH.edit_distance_similarity( AD_BASE.ADDRESS_STRING_NOPC,TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) as score1,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE SECOND_A.H3_8_P=AD_BASE.H3_8
 AND (INSTR(SECOND_A.CURRENT_LINE1,ad_base.ABBR_STREET1,1,1)>0 OR INSTR(SECOND_A.CURRENT_LINE1,AD_BASE.DESCRIPTION,1,1)>0)
 AND (AD_BASE.BUILD_NO=second_A.add_num OR AD_BASE.BUILD_NO IS NULL AND AD_BASE.SUB_UNIT = SECOND_A.ADD_NUM);

UPDATE results7 SET STAGE= '7'; 

CREATE TABLE RESULTS7A AS SELECT DISTINCT ID, STAGE,UPRN, PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE, UPRN, PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,
       MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
       DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
   FROM RESULTS7)
   WHERE SCORE1 = MAX_SCORE AND COUNT_P_UPRN=1
 ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS7A COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTS7A Where SECOND_A.ID = RESULTS7A.ID);
COMMIT;

drop table "MARTIR03"."RESULTS7";
--addresses are indexed to the same H3_7 tile andincoming line 3 is longer than 3 characters, 
--address string JW score diff is greater than 0.87 and ad_base buidlno is within incoming numerical elements.
create table results8 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  (length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_STRING_NOPC,TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))/length(AD_BASE.ADDRESS_STRING_NOPC) AS SCORE1,
   AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_7=SECOND_A.H3_7_p
 AND LENGTH(TRIM(SECOND_A.CURRENT_LINE1))<3
 and (length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_STRING_NOPC,TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))/length(AD_BASE.ADDRESS_STRING_NOPC) >0.87
  AND AD_BASE.BUILD_NO=second_A.BUILD_NO;

UPDATE results8 SET STAGE= '8'; 

CREATE TABLE RESULTS8A AS SELECT DISTINCT ID, STAGE,UPRN, PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE, COUNT_P_UPRN FROM(
SELECT ID, STAGE, UPRN, PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,
      MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
      DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
   FROM RESULTS8)
   WHERE SCORE1 = MAX_SCORE AND COUNT_P_UPRN =1
 ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS8A COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTS8A Where SECOND_A.ID = RESULTS8A.ID);
COMMIT;
--
drop table "MARTIR03"."RESULTS8";
----addresses are indexed to the same h3_7 tile. addressbase build no is within incoming numerical elements street description is within incoming address 
--and JW score between full addressstrings is greater than 0.87
create table results9 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  (length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_STRING_NOPC,TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))/length(AD_BASE.ADDRESS_STRING_NOPC)
  +
  (length(TRIM(LEADING FROM AD_BASE.ADDRESS_STRING_NOPC)) - UTL_MATCH.EDIT_DISTANCE(SECOND_A.ADDRESS_STRING,TRIM(LEADING FROM AD_BASE.ADDRESS_STRING_NOPC)))/length(SECOND_A.ADDRESS_STRING) AS SCORE1,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE SECOND_A.H3_7_P=AD_BASE.H3_7
  AND INSTR(SECOND_A.ADDRESS_STRING,AD_BASE.DESCRIPTION,1,1)>0
  AND AD_BASE.BUILD_NO=SECOND_A.BUILD_NO
  and (length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_STRING_NOPC,TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))/length(AD_BASE.ADDRESS_STRING_NOPC) >0.87;
 --
 UPDATE results9 SET STAGE= '9'; 
 
 CREATE TABLE RESULTS9A AS SELECT DISTINCT ID,STAGE, UPRN, PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID, STAGE, UPRN, PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,
      MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE
   FROM RESULTS9)
   WHERE SCORE1 = MAX_SCORE
 ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS9A COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTS9A Where SECOND_A.ID = RESULTS9A.ID);
COMMIT;
--
drop table "MARTIR03"."RESULTS9";
----------------------
--address is indexed to same H3_8 tile ad_base build_no = numerical elements form incoming lines 1 & 2 combined also contain the street desrciption from USRN.
----------------------
create table results10 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM,
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.description,
  (length(TRIM(LEADING FROM SECOND_A.address_string)) - 
  UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_STRING_NOPC,TRIM(LEADING FROM SECOND_A.address_string)))/length(AD_BASE.ADDRESS_STRING_NOPC) AS SCORE1,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
WHERE SECOND_A.H3_6_P=AD_BASE.H3_6
AND INSTR(AD_BASE.BUILD_NO,SECOND_A.BUILD_NO,1,1)>0
and LENGTH(AD_BASE.BUILD_NO)=LENGTH(SECOND_A.BUILD_NO)
AND INSTR(SECOND_A.ADDRESS_STRING,AD_BASE.ABBR_STREET1,1,1)>0;

CREATE TABLE RESULTS10A AS SELECT DISTINCT ID, STAGE, UPRN, PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN, PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS10)
WHERE COUNT_P_UPRN=1 and SCORE1 >0.1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
--
 ALTER TABLE RESULTS10A COMPRESS;
 
drop table "MARTIR03"."RESULTS10";
--
DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTS10A Where SECOND_A.ID = RESULTS10A.ID);
COMMIT;

-------------------------
--addresses indexed to same h3_6 tile, address base build no = incoming numerical elements and street description is within line 1 from address
-------------------------
create table results11 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_STRING_NOPC,
  TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))/length(AD_BASE.ADDRESS_STRING_NOPC) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_6=SECOND_A.H3_6_P
AND AD_BASE.BUILD_NO = SECOND_A.ADD_NUM 
AND INSTR(SECOND_A.CURRENT_LINE1 ,AD_BASE.DESCRIPTION,1,1)>0;

 UPDATE results11 SET STAGE= '11'; 
--
CREATE TABLE RESULTS11A AS SELECT DISTINCT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE
FROM RESULTS11)
WHERE SCORE1 = MAX_SCORE 
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS11A COMPRESS;
--
DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTS11A Where SECOND_A.ID = RESULTS11A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS11";
------------------------
--addresses indexed to the same H3_7 all numeric elements match line 2 contains teh street name or abbr of street name
------------------------
create table results12 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_STRING_NOPC,
  TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))/length(AD_BASE.ADDRESS_STRING_NOPC) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
AND (AD_BASE.add_num= SECOND_A.ADD_NUM )
AND (INSTR(SECOND_A.CURRENT_LINE2 ,AD_BASE.DESCRIPTION,1,1)>0 or INSTR(SECOND_A.CURRENT_LINE2 ,ad_base.ABBR_STREET1,1,1)>0);
--
 UPDATE results12 SET STAGE= '12'; 

CREATE TABLE RESULTS12A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE
FROM RESULTS12)
WHERE SCORE1 = MAX_SCORE 
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS12A COMPRESS;
--
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS12A Where SECOND_A.ID = RESULTS12A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS12";
-----------------
-- addresses are  indexed to same h3_7 tile build no = incoming numerical elements line 1 contains str abbr
-----------------
create table results13 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_STRING_NOPC,
TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))/length(AD_BASE.ADDRESS_STRING_NOPC) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
AND(AD_BASE.BUILD_NO = SECOND_A.ADD_NUM )
AND INSTR(SECOND_A.CURRENT_LINE1 ,ad_base.ABBR_STREET1,1,1)>0;

UPDATE results13 SET STAGE= '13'; 

CREATE TABLE RESULTS13A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS13)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS13A 
COMPRESS;
--
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS13A Where SECOND_A.ID = RESULTS13A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS13";
-------------------
-------------------

-----------------
--addresses are indexed to same h3_7 numerical elements match and line 2 contains abbr street
-----------------
create table results14 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_STRING_NOPC,
TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))/length(AD_BASE.ADDRESS_STRING_NOPC) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
AND (AD_BASE.ADD_NUM = SECOND_A.ADD_NUM )
AND INSTR(SECOND_A.CURRENT_LINE2 ,ad_base.ABBR_STREET1,1,1)>0;

 UPDATE results14 SET STAGE= '14'; 

CREATE TABLE RESULTS14A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS14)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS14A 
COMPRESS;
--
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS14A Where SECOND_A.ID = RESULTS14A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS14";
-----------------------------
--addresses are indexed to same h3_8 tile numerical elements match, line 1 and 2 with no white space are JW scored and threasholded to 0.8 in addtion street or str abbr are in the incoming address
-----------------------------
create table results15 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1)) - UTL_MATCH.JARO_WINKLER(AD_BASE.DESCRIPTION,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1)))/length(AD_BASE.DESCRIPTION) AS SCORE1,
(length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE2)) - UTL_MATCH.JARO_WINKLER(AD_BASE.DESCRIPTION,TRIM(LEADING FROM SECOND_A.CURRENT_LINE2)))/length(AD_BASE.DESCRIPTION) AS SCORE2
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_8=SECOND_A.H3_8_P
AND AD_BASE.ADD_NUM = SECOND_A.ADD_NUM 
and UTL_MATCH.JARO_WINKLER(replace (SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2, ' ', ''),replace(ad_base.address_line_1||ad_base.address_line_2, ' ', ''))>0.8
AND (INSTR(SECOND_A.CURRENT_LINE2,AD_BASE.DESCRIPTION, 1, 1)>0 OR INSTR(SECOND_A.CURRENT_LINE2,ad_base.ABBR_STREET1, 1, 1)>0
OR INSTR(SECOND_A.CURRENT_LINE1,AD_BASE.DESCRIPTION, 1, 1)>0 OR INSTR(SECOND_A.CURRENT_LINE1,ad_base.ABBR_STREET1, 1, 1)>0);

UPDATE RESULTS15 SET STAGE= '15'; 
---------------------------------
CREATE TABLE RESULTS15A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE
FROM RESULTS15)
WHERE SCORE1 = MAX_SCORE 
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS15A COMPRESS;
-----------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS15A Where SECOND_A.ID = RESULTS15A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS15";
------------------------------------
--addresses indexed to same h3_7 tile numerical elements match, street and post town are within the address string, line 1 adn 2 JW dist is above 0.87 
------------------------------------
create table results16 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.CURRENT_LINE1,
SECOND_A.CURRENT_LINE2,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
AD_BASE.ADDRESS_LINE_1,
AD_BASE.ADDRESS_LINE_2,
AD_BASE.POST_TOWN,
AD_BASE.TOWN,
AD_BASE.LOCALITY,
(length(SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.JARO_WINKLER(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)/length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE SECOND_A.H3_7_P =AD_BASE.H3_7
AND AD_BASE.ADD_NUM = SECOND_A.ADD_NUM 
AND (INSTR(SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2,ad_base.ABBR_STREET1, 1, 1)>0 or INSTR(SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2,AD_BASE.description, 1, 1)>0  )
AND INSTR(SECOND_A.ADDRESS_STRING, AD_BASE.POST_TOWN, 1, 1)>0
and (length( SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2) - UTL_MATCH.JARO_WINKLER(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2))
/length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2)<0.87;
--AND SOUNDEX(regexp_substr(SECOND_A.CURRENT_LINE2, '[A-Z ]+', 1, 1)) = SOUNDEX(regexp_substr(AD_BASE.DESCRIPTION, '[A-Z ]+', 1, 1));
-------------------
 UPDATE RESULTS16 SET STAGE= '16'; 

CREATE TABLE RESULTS16A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MIN_SCORE FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MIN(SCORE1) OVER (PARTITION BY ID) AS MIN_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS16)
WHERE COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS16A COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS16A Where SECOND_A.ID = RESULTS16A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS16";
--------------------------
--Addresses are indexed to h3_7 
--------------------------
create table results17I as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'BLOCK|FLAT|FLOOR FLAT',''),TRIM(LEADING FROM SECOND_A.ADDRESS_STRING))) / LENGTH(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'BLOCK|FLAT|FLOOR FLAT','')) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
AND AD_BASE.ADD_NUM = SECOND_A.ADD_NUM
AND( INSTR(SECOND_A.CURRENT_LINE2 ,ad_base.ABBR_STREET1,1,1)>0 OR INSTR(SECOND_A.CURRENT_LINE1 ,ad_base.ABBR_STREET1,1,1)>0)
--OR  INSTR(SECOND_A.CURRENT_LINE2 ,AD_BASE.DESCRIPTION,1,1)>0 OR INSTR(SECOND_A.CURRENT_LINE1 ,AD_BASE.DESCRIPTION,1,1)>0)
and instr(SECOND_A.ADDRESS_STRING,ad_base.post_town,1,1)>0;

UPDATE RESULTS17I SET STAGE= '17I'; 
 
create table results17II as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'BLOCK|FLAT|FLOOR FLAT',''),TRIM(LEADING FROM SECOND_A.ADDRESS_STRING))) / LENGTH(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'BLOCK|FLAT|FLOOR FLAT','')) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
AND AD_BASE.ADD_NUM = SECOND_A.ADD_NUM
AND( INSTR(SECOND_A.CURRENT_LINE2 ,AD_BASE.DESCRIPTION,1,1)>0 OR INSTR(SECOND_A.CURRENT_LINE1 ,AD_BASE.DESCRIPTION,1,1)>0)
and instr(SECOND_A.ADDRESS_STRING,ad_base.post_town,1,1)>0;

UPDATE RESULTS17II SET STAGE= '17II'; 
 
CREATE TABLE RESULTS17 AS 
select * from results17I
union 
select * from results17II;

----------------------------
CREATE TABLE RESULTS17A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MIN_SCORE FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MIN(SCORE1) OVER (PARTITION BY ID) AS MIN_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS17)
WHERE COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
------------------------
ALTER TABLE RESULTS17A COMPRESS;
------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS17A Where SECOND_A.ID = RESULTS17A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS17";
drop table "MARTIR03"."RESULTS17I";
drop table "MARTIR03"."RESULTS17II";
----------------------------
create table results18 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_STRING_NOPC,TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))/length(AD_BASE.ADDRESS_STRING_NOPC) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_8=SECOND_A.H3_8_P
AND  SECOND_A.ADD_NO_SPACE = REPLACE(AD_BASE.ADDRESS_STRING_NOPC,' ','');
--------------------
UPDATE RESULTS18 SET STAGE= '18'; 
 
CREATE TABLE RESULTS18A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MIN_SCORE FROM(
SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MIN(SCORE1) OVER (PARTITION BY ID) AS MIN_SCORE,
COUNT(DISTINCT PARENT_UPRN) OVER (PARTITION BY ID) AS COUNT_P_UPRN
FROM RESULTS18)
WHERE COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
--------------------
ALTER TABLE RESULTS18A COMPRESS;
-------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS18A Where SECOND_A.ID = RESULTS18A.ID);
COMMIT;
---------------------
drop table "MARTIR03"."RESULTS18";
-----------------
--------------------
create table results19 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|FLOOR|RM|ROOM|FLAT','')||AD_BASE.ADDRESS_LINE_2
,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/
length(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|RM|ROOM|FLOOR|FLAT','')||AD_BASE.ADDRESS_LINE_2) AS SCORE1
FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
AND INSTR(SECOND_A.ADDRESS_STRING ,ad_base.ABBR_STREET1,1,1)>0
AND INSTR(SECOND_A.ADDRESS_STRING ,AD_BASE.POST_TOWN,1,1)>0
AND SECOND_A.add_num=AD_BASE.add_num;

UPDATE RESULTS19 SET STAGE= '19'; 

CREATE TABLE RESULTS19A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE
FROM RESULTS19)
WHERE SCORE1 = MAX_SCORE 
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
------------------------
ALTER TABLE RESULTS19A COMPRESS;
---------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS19A Where SECOND_A.ID = RESULTS19A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS19";
-----------------------
create table results20 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|FLOOR|RM|ROOM|FLAT','')||AD_BASE.ADDRESS_LINE_2
  ,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/length(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|RM|ROOM|FLOOR|FLAT','')||AD_BASE.ADDRESS_LINE_2) AS SCORE1
FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
 AND  INSTR(SECOND_A.CURRENT_LINE2 ,AD_BASE.DESCRIPTION,1,1)>0
AND SECOND_A.CURRENT_LINE3=AD_BASE.POST_TOWN
AND SECOND_A.add_num=AD_BASE.add_num ;
------------
UPDATE RESULTS20 SET STAGE= '20'; 

CREATE TABLE RESULTS20A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
COUNT(DISTINCT PARENT_UPRN) OVER (PARTITION BY ID) AS COUNT_P_UPRN
FROM RESULTS20)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
----------------
ALTER TABLE RESULTS20A
COMPRESS;
--------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS20A Where SECOND_A.ID = RESULTS20A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS20";
-------------
----------
create table results21 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.description,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|FLOOR|RM|ROOM|FLAT','')||AD_BASE.ADDRESS_LINE_2
,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/length(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|RM|ROOM|FLOOR|FLAT','')||AD_BASE.ADDRESS_LINE_2) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_8=SECOND_A.H3_8_P
and ad_base.ABBR_STREET1 is not null
AND  INSTR(SECOND_A.CURRENT_LINE2 ,ad_base.ABBR_STREET1,1,1)>0
AND SECOND_A.CURRENT_LINE3=AD_BASE.POST_TOWN
AND SECOND_A.BUILD_NO = AD_BASE.BUILD_NO;

UPDATE RESULTS21 SET STAGE= '21'; 
-----------------------
CREATE TABLE RESULTS21A AS SELECT DISTINCT ID,stage, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID, stage, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
COUNT(DISTINCT PARENT_UPRN) OVER (PARTITION BY ID) AS COUNT_P_UPRN
FROM RESULTS21)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
----------------------
ALTER TABLE RESULTS21A COMPRESS;
----------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS21A Where SECOND_A.ID = RESULTS21A.ID);
COMMIT;
---------------------
drop table "MARTIR03"."RESULTS21";
-----------------
----------------------
create table results22 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.description,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|FLOOR|RM|ROOM|FLAT','')||AD_BASE.ADDRESS_LINE_2
,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/
length(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|RM|ROOM|FLOOR|FLAT','')||AD_BASE.ADDRESS_LINE_2) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_8=SECOND_A.H3_8_P
and ad_base.ABBR_STREET1 is not null
AND  INSTR(SECOND_A.CURRENT_LINE2 ,ad_base.ABBR_STREET1,1,1)>0
AND SECOND_A.BUILD_NO = AD_BASE.BUILD_NO;
---------------------------------------
UPDATE RESULTS22 SET STAGE= '22'; 

CREATE TABLE RESULTS22A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
COUNT(DISTINCT PARENT_UPRN) OVER (PARTITION BY ID) AS COUNT_P_UPRN
FROM RESULTS22)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
---------------------------------------
ALTER TABLE RESULTS22A COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS22A Where SECOND_A.ID = RESULTS22A.ID);
COMMIT;
---------------------------------------
drop table "MARTIR03"."RESULTS22";
-----------------
create table results23 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.description,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|FLOOR|RM|ROOM|FLAT','')||AD_BASE.ADDRESS_LINE_2
,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/
length(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|RM|ROOM|FLOOR|FLAT','')||AD_BASE.ADDRESS_LINE_2) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_8=SECOND_A.H3_8_P
and ad_base.ABBR_STREET1 is not null
AND  INSTR(SECOND_A.CURRENT_LINE1 ,ad_base.ABBR_STREET1,1,1)>0
AND SECOND_A.BUILD_NO = AD_BASE.BUILD_NO;
---------------------------------------
UPDATE RESULTS23 SET STAGE= '23';

CREATE TABLE RESULTS23A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
COUNT(DISTINCT PARENT_UPRN) OVER (PARTITION BY ID) AS COUNT_P_UPRN
FROM RESULTS23)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
---------------------------------------
ALTER TABLE RESULTS23A
COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS23A Where SECOND_A.ID = RESULTS23A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS23";
---------------------------------------
create table results24 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.description,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|FLOOR|RM|ROOM|FLAT','')||AD_BASE.ADDRESS_LINE_2
,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/length(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|RM|ROOM|FLOOR|FLAT','')||AD_BASE.ADDRESS_LINE_2) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
--and ad_base.ABBR_STREET1is not null
AND SECOND_A.add_NUM = AD_BASE.sub_unit
AND  (INSTR(SECOND_A.ADDRESS_STRING ,ad_base.ABBR_STREET1,1,1)>0 or INSTR(SECOND_A.ADDRESS_STRING ,AD_BASE.description,1,1)>0);

UPDATE RESULTS24 SET STAGE= '24';
--OR SECOND_A.ADD_NUM = AD_BASE.ADD_NUM);
---------------------------------------
CREATE TABLE RESULTS24A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID, STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
COUNT(DISTINCT PARENT_UPRN) OVER (PARTITION BY ID) AS COUNT_P_UPRN
FROM RESULTS24)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
---------------------------------------
ALTER TABLE RESULTS24A COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS24A Where SECOND_A.ID = RESULTS24A.ID);
COMMIT;
---------------------------------------
drop table "MARTIR03"."RESULTS24";
---------------------------------------
---------------------------------------
create table results25 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.description,
AD_BASE.ADDRESS_STRING_NOPC,
AD_BASE.BUILD_NO,
AD_BASE.SUB_UNIT,
(length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|FLOOR|RM|ROOM|FLAT','')||AD_BASE.ADDRESS_LINE_2
,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/
length(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|RM|ROOM|FLOOR|FLAT','')||AD_BASE.ADDRESS_LINE_2) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
and AD_BASE.DESCRIPTION is not null
AND  (INSTR(SECOND_A.CURRENT_LINE1 ,AD_BASE.DESCRIPTION,1,1)>0 or INSTR(SECOND_A.CURRENT_LINE1 ,ad_base.ABBR_STREET1,1,1)>0 )
AND INSTR(SECOND_A.ADDRESS_STRING ,AD_BASE.BUILD_NO,1,1)>0
AND INSTR(SECOND_A.ADDRESS_STRING ,AD_BASE.SUB_UNIT,1,1)>0
and (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|FLOOR|RM|ROOM|FLAT','')||AD_BASE.ADDRESS_LINE_2
,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/
length(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|RM|ROOM|FLOOR|FLAT','')||AD_BASE.ADDRESS_LINE_2)>0.75;
UPDATE RESULTS25 SET STAGE= '25';
---------------------------------------
CREATE TABLE RESULTS25A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
COUNT(DISTINCT PARENT_UPRN) OVER (PARTITION BY ID) AS COUNT_P_UPRN
FROM RESULTS25)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
---------------------------------------
ALTER TABLE RESULTS25A COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS25A Where SECOND_A.ID = RESULTS25A.ID);
COMMIT;
---------------------------------------
drop table "MARTIR03"."RESULTS25";
---------------------------------------
---------------------------------------
create table results26 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.description,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|FLOOR|RM|ROOM|FLAT','')||AD_BASE.ADDRESS_LINE_2
,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/
length(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|RM|ROOM|FLOOR|FLAT','')||AD_BASE.ADDRESS_LINE_2) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
and AD_BASE.DESCRIPTION is not null
AND  (INSTR(SECOND_A.CURRENT_LINE1 ,AD_BASE.DESCRIPTION,1,1)>0 or INSTR(SECOND_A.CURRENT_LINE1 ,ad_base.ABBR_STREET1,1,1)>0)
AND SECOND_A.BUILD_NO = AD_BASE.BUILD_NO;

UPDATE RESULTS26 SET STAGE= '26';
---------------------------------------
CREATE TABLE RESULTS26A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID, STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
COUNT(DISTINCT PARENT_UPRN) OVER (PARTITION BY ID) AS COUNT_P_UPRN
FROM RESULTS26)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
---------------------------------------
ALTER TABLE RESULTS26A
COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS26A Where SECOND_A.ID = RESULTS26A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS26";
---------------------------------------
---------------------------------------
create table results27 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.description,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|FLOOR|RM|ROOM|FLAT','')||AD_BASE.ADDRESS_LINE_2
,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/length(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|RM|ROOM|FLOOR|FLAT','')||AD_BASE.ADDRESS_LINE_2) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
and AD_BASE.DESCRIPTION is not null
AND (INSTR(SECOND_A.CURRENT_LINE2 ,AD_BASE.DESCRIPTION,1,1)>0 or INSTR(SECOND_A.CURRENT_LINE2 ,ad_base.ABBR_STREET1,1,1)>0)
AND SECOND_A.BUILD_NO = AD_BASE.BUILD_NO;

UPDATE RESULTS27 SET STAGE= '27';
---------------------------------------
CREATE TABLE RESULTS27A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
COUNT(DISTINCT PARENT_UPRN) OVER (PARTITION BY ID) AS COUNT_P_UPRN
FROM RESULTS27)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
---------------------------------------
ALTER TABLE RESULTS27A COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS27A Where SECOND_A.ID = RESULTS27A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS27";
---------------------------------------
---------------------------------------
create table results28 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
SECOND_A.BUILD_NO as in_B_NO,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.description,
AD_BASE.BUILD_NO AS B_NO,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|FLOOR|RM|ROOM|FLAT','')||AD_BASE.ADDRESS_LINE_2
,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/
length(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|RM|ROOM|FLOOR|FLAT','')||AD_BASE.ADDRESS_LINE_2) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_6=SECOND_A.H3_6_P
and AD_BASE.DESCRIPTION is not null
AND  (INSTR(SECOND_A.CURRENT_LINE1 ,AD_BASE.DESCRIPTION,1,1)>0 or INSTR(SECOND_A.CURRENT_LINE1 ,ad_base.ABBR_STREET1,1,1)>0
OR INSTR(SECOND_A.CURRENT_LINE2 ,AD_BASE.DESCRIPTION,1,1)>0 or INSTR(SECOND_A.CURRENT_LINE2 ,ad_base.ABBR_STREET1,1,1)>0)
AND SECOND_A.BUILD_NO = AD_BASE.BUILD_NO;
---------------------------------------
UPDATE RESULTS28 SET STAGE= '28';

CREATE TABLE RESULTS28A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN,B_NO,IN_B_NO, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,B_NO,IN_B_NO,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
COUNT(DISTINCT PARENT_UPRN) OVER (PARTITION BY ID) AS COUNT_P_UPRN
FROM RESULTS28)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
AND B_NO=IN_B_NO
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
---------------------------------------
ALTER TABLE RESULTS28A
COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS28A Where SECOND_A.ID = RESULTS28A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS28";
---------------------------------------

---------------------------------------
create table results29 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
SECOND_A.BUILD_NO as in_B_NO,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.description,
AD_BASE.BUILD_NO AS B_NO,
AD_BASE.ADDRESS_STRING_NOPC,
(length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
UTL_MATCH.EDIT_DISTANCE(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|FLOOR|RM|ROOM|FLAT','')||AD_BASE.ADDRESS_LINE_2
,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))/
length(regexp_replace(AD_BASE.ADDRESS_LINE_1,'UNIT|BLOCK|BLK|FLAT|FL|RM|ROOM|FLOOR|FLAT','')||AD_BASE.ADDRESS_LINE_2) AS SCORE1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.H3_6=SECOND_A.H3_6_P
and AD_BASE.DESCRIPTION is not null
AND  (INSTR(SECOND_A.CURRENT_LINE1 ,AD_BASE.DESCRIPTION,1,1)>0 or INSTR(SECOND_A.CURRENT_LINE1 ,ad_base.ABBR_STREET1,1,1)>0
OR INSTR(SECOND_A.CURRENT_LINE2 ,AD_BASE.DESCRIPTION,1,1)>0 or INSTR(SECOND_A.CURRENT_LINE2 ,ad_base.ABBR_STREET1,1,1)>0)
AND SECOND_A.BUILD_NO IS NULL
AND SECOND_A.SUB_UNIT = AD_BASE.BUILD_NO;

UPDATE RESULTS29 SET STAGE= '29';
---------------------------------------
CREATE TABLE RESULTS29A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN,B_NO,IN_B_NO, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,B_NO,IN_B_NO,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
COUNT(DISTINCT PARENT_UPRN) OVER (PARTITION BY ID) AS COUNT_P_UPRN
FROM RESULTS29)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
---------------------------------------
ALTER TABLE RESULTS29A
COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS29A Where SECOND_A.ID = RESULTS29A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS29";
----------------------
-----------------------
create table results30 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
  AD_BASE.UPRN,
  PARENT_UPRN,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
  UTL_MATCH.JARO_WINKLER(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,
  TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_STRING_NOPC) as score1,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_6=SECOND_A.H3_6_P
 AND INSTR(SECOND_A.CURRENT_LINE1 ,ad_base.ABBR_STREET1,1,1)>0
 AND INSTR(SECOND_A.CURRENT_LINE2 ,AD_BASE.TOWN,1,1)>0
  AND AD_BASE.ADD_NUM = SECOND_A.ADD_NUM;
  
  UPDATE RESULTS30 SET STAGE= '30';
-------------
CREATE TABLE RESULTS30A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN,ADDRESS_STRING,ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS30)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS30A COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS30A Where SECOND_A.ID = RESULTS30A.ID);
COMMIT;

drop table "MARTIR03"."RESULTS30";
---------------------------------------
create table results31 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
  AD_BASE.UPRN,
  PARENT_UPRN,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.JARO_WINKLER(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_STRING_NOPC) as score,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_6=SECOND_A.H3_6_P
 AND INSTR(SECOND_A.CURRENT_LINE1 ,ad_base.ABBR_STREET1,1,1)>0
 AND INSTR(SECOND_A.CURRENT_LINE2 ,AD_BASE.TOWN,1,1)>0
  AND AD_BASE.BUILD_NO = SECOND_A.SUB_UNIT
  AND SECOND_A.BUILD_NO IS NULL;
  
UPDATE RESULTS31 SET STAGE= '31';
-------------
CREATE TABLE RESULTS31A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE, MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,MAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS31)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS31A COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS31A Where SECOND_A.ID = RESULTS31A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS31";
---------------------------------------

create table results32 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
SECOND_A.CURRENT_LINE2,
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_LINE_2,
  (length(TRIM(SECOND_A.SUB_UNIT||' '|| SECOND_A.CURRENT_LINE2)) - SYS.UTL_MATCH.JARO_WINKLER_SIMILARITY(AD_BASE.ADD_NUM|| ' '||ad_base.ABBR_STREET1,TRIM(SECOND_A.SUB_UNIT||' '|| SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADD_NUM|| ' '||ad_base.ABBR_STREET1) as score,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
and regexp_replace(regexp_replace(SECOND_A.CURRENT_LINE2,'[A-Z]',''),'[[:space:]]{2,}', '')=AD_BASE.SUB_UNIT 
AND AD_BASE.BUILD_NO IS NULL
--and ad_base.ABBR_STREET1is not null
--NEEDS WORK ON SCORING AND TO ENSURE LINE 2 IS SIMILAR
 AND INSTR(SECOND_A.CURRENT_LINE2 ,ad_base.ABBR_STREET1,1,1)>0;
 --------------------
 UPDATE RESULTS32 SET STAGE= '32';
 --------------------
CREATE TABLE RESULTS32A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE, MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,MAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS32)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS32A
COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS32A Where SECOND_A.ID = RESULTS32A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS32";

---------------------------------------
create table results33 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
SECOND_A.CURRENT_LINE1,
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_LINE_1,
  (length(TRIM(SECOND_A.CURRENT_LINE1)) 
  - SYS.UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADD_NUM|| ' '||ad_base.ABBR_STREET1,TRIM(SECOND_A.CURRENT_LINE1)))
  /length(AD_BASE.ADD_NUM|| ' '||ad_base.ABBR_STREET1) as score,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
and regexp_replace(TRIM(regexp_replace(SECOND_A.CURRENT_LINE1,'[A-Z]','')),'[[:space:]]{2,}', '')=AD_BASE.SUB_UNIT --problem here for alpha numbers
AND AD_BASE.BUILD_NO IS NULL
AND LENGTH(SECOND_A.CURRENT_LINE1)>4
--NEEDS WORK ON SCORING AND TO ENSURE LINE 2 IS SIMILAR
 AND INSTR(SECOND_A.CURRENT_LINE1,ad_base.ABBR_STREET1,1,1)>0;
 --------------------
 UPDATE RESULTS33 SET STAGE= '33';
 --------------------
 CREATE TABLE RESULTS33A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE, MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,MAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS33)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS33A
COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS33A Where SECOND_A.ID = RESULTS33A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS33";
---------------------------------------
create table results34 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
SECOND_A.CURRENT_LINE1,
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_LINE_1,
  (length(TRIM(SECOND_A.CURRENT_LINE1)) 
  - SYS.UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADD_NUM|| ' '||ad_base.ABBR_STREET1,TRIM(SECOND_A.CURRENT_LINE1)))
  /length(AD_BASE.ADD_NUM|| ' '||ad_base.ABBR_STREET1) as score,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
and regexp_replace(TRIM(regexp_replace(SECOND_A.CURRENT_LINE1,'[A-Z]','')),'[[:space:]]{2,}', '')=AD_BASE.SUB_UNIT --problem for alpha characters here
AND AD_BASE.BUILD_NO IS NULL
AND LENGTH(SECOND_A.CURRENT_LINE1)>4
--NEEDS WORK ON SCORING AND TO ENSURE LINE 2 IS SIMILAR
 AND INSTR(SECOND_A.CURRENT_LINE1,AD_BASE.DESCRIPTION ,1,1)>0 ;
 
--------------------
UPDATE RESULTS34 SET STAGE= '34';
 --------------------
 CREATE TABLE RESULTS34A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE, MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,MAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS34)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS34A
COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS34A Where SECOND_A.ID = RESULTS34A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS34";
--------------------------
-------------------------
create table results35 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
SECOND_A.CURRENT_LINE1,
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_LINE_1,
  (length(TRIM(SECOND_A.CURRENT_LINE1)) 
  - SYS.UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2,TRIM(SECOND_A.CURRENT_LINE1)))
  /length(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2) as score,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
and regexp_replace(TRIM(regexp_replace(SECOND_A.CURRENT_LINE1,'[A-Z]','')),'[[:space:]]{2,}', '')=AD_BASE.SUB_UNIT
AND AD_BASE.BUILD_NO IS NULL
--NEEDS WORK ON SCORING AND TO ENSURE LINE 2 IS SIMILAR
 AND (INSTR(SECOND_A.CURRENT_LINE1,ad_base.ABBR_STREET1,1,1)>0 OR INSTR(SECOND_A.CURRENT_LINE1,AD_BASE.DESCRIPTION ,1,1)>0);
 ------------------
 UPDATE RESULTS35 SET STAGE= '35';
 -------------------
 CREATE TABLE RESULTS35A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE, MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,MAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS35)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS35A
COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS35A Where SECOND_A.ID = RESULTS35A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS35";

create table results36 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
SECOND_A.CURRENT_LINE1,
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_LINE_1,
  (length(TRIM(SECOND_A.CURRENT_LINE1)) 
  - SYS.UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2,TRIM(SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2) as score,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
and regexp_replace(TRIM(regexp_replace(SECOND_A.CURRENT_LINE2,'[A-Z]','')),'[[:space:]]{2,}', '')=AD_BASE.SUB_UNIT
AND AD_BASE.BUILD_NO IS NULL
--NEEDS WORK ON SCORING AND TO ENSURE LINE 2 IS SIMILAR
 AND (INSTR(SECOND_A.CURRENT_LINE2,ad_base.ABBR_STREET1,1,1)>0 OR INSTR(SECOND_A.CURRENT_LINE2,AD_BASE.DESCRIPTION ,1,1)>0) ;

UPDATE RESULTS36 SET STAGE= '36';

 CREATE TABLE RESULTS36A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE, MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,MAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS36)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS36A
COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS36A Where SECOND_A.ID = RESULTS36A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS36";

create table results37 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
SECOND_A.CURRENT_LINE1,
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_LINE_1,
  (length(TRIM(SECOND_A.CURRENT_LINE1)) 
  - SYS.UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2,TRIM(SECOND_A.CURRENT_LINE1)))
  /length(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2) as score,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
and regexp_replace(TRIM(regexp_replace(SECOND_A.CURRENT_LINE1,'[A-Z]','')),'[[:space:]]{2,}', '')=AD_BASE.SUB_UNIT
AND AD_BASE.BUILD_NO IS NULL
and length(SECOND_A.CURRENT_LINE1)>4
and length(AD_BASE.ADDRESS_LINE_1)>4
--NEEDS WORK ON SCORING AND TO ENSURE LINE 2 IS SIMILAR
 AND (INSTR(SECOND_A.CURRENT_LINE1,AD_BASE.sub_unit||' '||ad_base.ABBR_STREET1,1,1)>0 OR INSTR(SECOND_A.CURRENT_LINE1,AD_BASE.sub_unit|| ' ' ||AD_BASE.DESCRIPTION ,1,1)>0) 
 and  (length(TRIM(SECOND_A.CURRENT_LINE1)) 
  - SYS.UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2,TRIM(SECOND_A.CURRENT_LINE1)))
  /length(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2)>0.3;

UPDATE RESULTS37 SET STAGE= '37';

CREATE TABLE RESULTS37A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE, MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,MAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS37)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS37A
COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS37A Where SECOND_A.ID = RESULTS37A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS37";

--create table results388 as SELECT 
--SECOND_A.ID,
--SECOND_A.STAGE,
--SECOND_A.ADDRESS_STRING, 
--SECOND_A.CURRENT_LINE1,
--AD_BASE.UPRN,
--AD_BASE.PARENT_UPRN,
  --AD_BASE.ADDRESS_LINE_1,
 -- (length(TRIM(SECOND_A.CURRENT_LINE1)) 
  -- - SYS.UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2,TRIM(SECOND_A.CURRENT_LINE1||' '||SECOND_A.CURRENT_LINE2)))
  --/length(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2) as score,
  --AD_BASE.ADDRESS_STRING_NOPC
  --FROM SECOND_A,AD_BASE
 --WHERE AD_BASE.H3_8=SECOND_A.H3_8_P
----AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.ADD_STRING_WORKING,1,1)>0
 --AND INSTR(AD_BASE.ADD_NUM,SECOND_A.BUILD_NO,1,1)>0;
----NEEDS WORK ON SCORING AND TO ENSURE LINE 2 IS SIMILAR
 ----AND TO_NUMBER(SECOND_A.BUILD_NUM) BETWEEN TO_NUMBER(AD_BASE.LOWER) AND TO_NUMBER(AD_BASE.UPPER)
 ----and ad_base.word_three=second_a.word_three
 --and   (length(TRIM(SECOND_A.CURRENT_LINE1)) 
  -- - SYS.UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2,TRIM(SECOND_A.CURRENT_LINE1||' '||SECOND_A.CURRENT_LINE2)))
  --/length(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2)>0.3;

--UPDATE RESULTS38 SET STAGE= '38';

--CREATE TABLE RESULTS38A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE, MAX_SCORE,COUNT_P_UPRN FROM(
--SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,MAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
--DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
--FROM RESULTS38)
--WHERE SCORE = MAX_SCORE 
--AND COUNT_P_UPRN =1
--ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

--ALTER TABLE RESULTS38A
--COMPRESS;
---------------------------------------
--DELETE FROM SECOND_A
--WHERE EXISTS( SELECT id FROM RESULTS38A Where SECOND_A.ID = RESULTS38A.ID);
--COMMIT;
--drop table "MARTIR03"."RESULTS38";
-------------------------------
------------------------------
create table results39 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING, 
SECOND_A.CURRENT_LINE1,
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_LINE_1,
  (length(TRIM(SECOND_A.ADD_NUM||' '||SECOND_A.CURRENT_LINE2)) 
  - SYS.UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2,TRIM(SECOND_A.ADD_NUM||' '||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1|| ' '||AD_BASE.ADDRESS_LINE_2) as score,
  AD_BASE.ADDRESS_STRING_NOPC
  FROM SECOND_A,AD_BASE
 WHERE AD_BASE.H3_7=SECOND_A.H3_7_P
AND regexp_replace(SECOND_A.ADD_NUM,'[[:space:]]{2,}', '')=regexp_replace(AD_BASE.ADDRESS_LINE_1,'[[:space:]]{2,}', '')
AND regexp_replace(SECOND_A.CURRENT_LINE2,'[[:space:]]{2,}', '')=regexp_replace(AD_BASE.ADDRESS_LINE_2,'[[:space:]]{2,}', '');
-----------------------
UPDATE RESULTS39 SET STAGE= '39';
-----------------------
CREATE TABLE RESULTS39A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE, MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,MAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS39)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS39A
COMPRESS;
---------------------------------------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS39A Where SECOND_A.ID = RESULTS39A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS39";

CREATE TABLE RESULTs40 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.current_line1)) - 
  UTL_MATCH.jaro_winkler(ad_base.ADDRESS_line_1,TRIM(LEADING FROM SECOND_A.current_line1)))
  /length(ad_base.ADDRESS_line_1) as score1,
  (length(TRIM(LEADING FROM SECOND_A.current_line1)) - 
  UTL_MATCH.jaro_winkler(ad_base.ADDRESS_line_2,TRIM(LEADING FROM SECOND_A.current_line2)))
  /length(ad_base.ADDRESS_line_2) as score2
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
and ad_base.add_num is null and second_a.add_num is null
--AND INSTR(AD_BASE.ADD_NUM,SECOND_A.ADD_NUM,1,1)>0
AND INSTR(ad_base.ADDRESS_STRING_NOPC,second_a.WORD_ONE||' '||second_a.WORD_TWO,1,1)>0
--OR INSTR(ad_base.ADDRESS_STRING_NOPC,second_a.WORD_TWO||' '||second_a.WORD_THREE,1,1)>0 
--OR INSTR(ad_base.ADDRESS_STRING_NOPC,second_a.WORD_THREE||' '||second_a.WORD_FOUR,1,1)>0
--OR INSTR(ad_base.ADDRESS_STRING_NOPC,second_a.WORD_FOUR||' '||second_a.WORD_FIVE,1,1)>0)
AND (INSTR(SECOND_A.ADDRESS_STRING,ad_base.DESCRIPTION,1,1)>0 or instr(SECOND_A.ADDRESS_STRING,ad_base.ABBR_STREET1,1,1)>0);

UPDATE RESULTS40 SET STAGE= '40';

CREATE TABLE RESULTS40A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS40)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS40A
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS40A Where SECOND_A.ID = RESULTS40A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS40";
------------- problem at stage 41 to include number logic
CREATE TABLE RESULTs41 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.current_line1)) - 
  UTL_MATCH.jaro_winkler(ad_base.ADDRESS_line_1,TRIM(LEADING FROM SECOND_A.current_line1)))
  /length(ad_base.ADDRESS_line_1) as score1,
  (length(TRIM(LEADING FROM SECOND_A.current_line1)) - 
  UTL_MATCH.jaro_winkler(ad_base.ADDRESS_line_2,TRIM(LEADING FROM SECOND_A.current_line2)))
  /length(ad_base.ADDRESS_line_2) as score2
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
and second_a.build_no=ad_base.build_no 

--AND INSTR(AD_BASE.ADD_NUM,SECOND_A.ADD_NUM,1,1)>0
AND INSTR(ad_base.ADDRESS_STRING_NOPC,second_a.WORD_ONE||' '||second_a.WORD_TWO,1,1)>0
--OR INSTR(ad_base.ADDRESS_STRING_NOPC,second_a.WORD_TWO||' '||second_a.WORD_THREE,1,1)>0 
--OR INSTR(ad_base.ADDRESS_STRING_NOPC,second_a.WORD_THREE||' '||second_a.WORD_FOUR,1,1)>0
--OR INSTR(ad_base.ADDRESS_STRING_NOPC,second_a.WORD_FOUR||' '||second_a.WORD_FIVE,1,1)>0)
AND (INSTR(SECOND_A.ADDRESS_STRING,ad_base.DESCRIPTION,1,1)>0 or instr(SECOND_A.ADDRESS_STRING,ad_base.ABBR_STREET1,1,1)>0);
UPDATE RESULTS41 SET STAGE= '41';

CREATE TABLE RESULTS41A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS41)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS41A
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS41A Where SECOND_A.ID = RESULTS41A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS41";
-------------------
CREATE TABLE RESULTS42 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
  UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_7=SECOND_A.H3_7_p 
and length(SECOND_A.CURRENT_LINE1)>3
AND (SECOND_A.add_num=AD_BASE.add_num or SECOND_A.add_num is null and AD_BASE.add_num is null)
AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.CURRENT_LINE1,1,1)>0 ;

CREATE TABLE RESULTS42_2 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_7=SECOND_A.H3_7_p 
and length(SECOND_A.CURRENT_LINE1)>3
AND (SECOND_A.add_num=AD_BASE.ADD_NUM or (SECOND_A.add_num is null and AD_BASE.add_num is null))
AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.CURRENT_LINE1,1,1)>0 ;

CREATE TABLE RESULTS42_3 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_6=SECOND_A.H3_6_p 
and length(SECOND_A.CURRENT_LINE1)>3
AND SECOND_A.BUILD_NO IS NULL AND SECOND_A.SUB_UNIT=AD_BASE.ADD_NUM
AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.CURRENT_LINE1,1,1)>0 ;
-------------

CREATE TABLE ALL_42 AS 
select * from RESULTS42
union 
select * from RESULTS42_2
union
select * from RESULTS42_3;

UPDATE ALL_42 SET STAGE= '42';

CREATE TABLE RESULTS42A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID,STAGE, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM ALL_42)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS42A COMPRESS;

----------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS42A Where SECOND_A.ID = RESULTS42A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS42";
drop table "MARTIR03"."RESULTS42_2";
drop table "MARTIR03"."RESULTS42_3";
drop table "MARTIR03"."ALL_42";
------------------------
CREATE TABLE RESULTS43 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_8=SECOND_A.H3_8_p 
and length(SECOND_A.CURRENT_LINE1)>3
AND replace(AD_BASE.ADDRESS_LINE_1,' ','') =REPLACE(CURRENT_LINE1,' ','') 
AND (SECOND_A.ADD_NUM IS NULL OR (SECOND_A.ADD_NUM = AD_BASE.SUB_UNIT AND AD_BASE.BUILD_NO IS NULL));
-------------
UPDATE RESULTS43 SET STAGE= '43';

CREATE TABLE RESULTS43A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS43)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS43A
COMPRESS;

----------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS43A Where SECOND_A.ID = RESULTS43A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS43";
--------------
CREATE TABLE RESULTS44 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_7=SECOND_A.H3_7_p 
and length(SECOND_A.CURRENT_LINE1)>3
AND replace(AD_BASE.ADDRESS_LINE_1,' ','') =REPLACE(CURRENT_LINE2,' ','') 
AND (SECOND_A.ADD_NUM IS NULL OR (SECOND_A.ADD_NUM = AD_BASE.SUB_UNIT AND AD_BASE.BUILD_NO IS NULL) OR SECOND_A.ADD_NUM = AD_BASE.ADD_NUM );
UPDATE RESULTS44 SET STAGE= '44';

CREATE TABLE RESULTS44A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS44)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS44A
COMPRESS;

----------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS44A Where SECOND_A.ID = RESULTS44A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS44";

CREATE TABLE RESULTS45 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_6=SECOND_A.H3_6_p 
--and length(SECOND_A.CURRENT_LINE1)>3
AND replace(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_3,' ','') =REPLACE(CURRENT_LINE1||CURRENT_LINE2,' ','') 
AND (SECOND_A.ADD_NUM IS NULL OR (SECOND_A.ADD_NUM = AD_BASE.SUB_UNIT AND AD_BASE.BUILD_NO IS NULL) OR SECOND_A.ADD_NUM = AD_BASE.ADD_NUM );
UPDATE RESULTS45 SET STAGE= '45';
--------------
CREATE TABLE RESULTS45A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS45)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS45A
COMPRESS;

----------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS45A Where SECOND_A.ID = RESULTS45A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS45";



UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,'C/VAN|CVN|',' CARAVAN ');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,'C/SITE',' CARAVAN SITE');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,'CARAVAN PK|C/PARK',' CARAVAN SITE');

UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' FA$|FHOUSE$| FM$|F/HOUS$| FA$|FAHOUSE$', ' FARMHOUSE');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' COTTS$| COTT$| COT$ ', ' COTTAGE');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' HTL$|HOT$', ' HOTEL');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' HSE$', ' HOUSE');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' COLL$| COL$', ' COLLEGE');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' LDG$', ' LODGE');

UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' EST$', ' ESTATE');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' PK ', ' PARK');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' SCH$', ' SCHOOL');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' BLDGS$', ' BUILDINGS');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' GDN ', ' GARDEN');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' RES$', ' RESIDENCE');

UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' BUNG$', ' BUNGALOW');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' CTRE$', ' CENTRE');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' COMM$', ' COMMUNITY');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' N/HME$', ' NURSING HOME');
UPDATE SECOND_A SET CURRENT_LINE1= regexp_replace(SECOND_A.CURRENT_LINE1,' HO | HME ', ' HOME');

CREATE TABLE RESULTS46 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_8=SECOND_A.H3_8_p 
and length(SECOND_A.CURRENT_LINE1)>3
AND replace(AD_BASE.ADDRESS_LINE_1,' ','') =REPLACE(CURRENT_LINE1,' ','') 
AND (SECOND_A.ADD_NUM IS NULL OR (SECOND_A.ADD_NUM = AD_BASE.SUB_UNIT AND AD_BASE.BUILD_NO IS NULL));

UPDATE RESULTS46 SET STAGE= '46';
CREATE TABLE RESULTS46A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS46)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS46A
COMPRESS;

----------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS46A Where SECOND_A.ID = RESULTS46A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS46";

CREATE TABLE RESULTS47 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_8=SECOND_A.H3_8_p 
and length(SECOND_A.CURRENT_LINE1)>3
AND replace(AD_BASE.ADDRESS_LINE_2,' ','') =REPLACE(CURRENT_LINE1,' ','') 
AND (SECOND_A.ADD_NUM IS NULL OR (SECOND_A.ADD_NUM = AD_BASE.SUB_UNIT AND AD_BASE.BUILD_NO IS NULL));

UPDATE RESULTS47 SET STAGE= '47';

CREATE TABLE RESULTS47A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS47)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS47A
COMPRESS;

----------
DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS47A Where SECOND_A.ID = RESULTS47A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS47";

--------
CREATE TABLE RESULTS48 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
SECOND_A.ADDRESS_STRING,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'[[:space:]]|,|[.]', '')) - SYS.UTL_MATCH.JARO_WINKLER(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'[[:space:]]|,|[.]', ''),
regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|[.]', '')))  /length(regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|[.]', '')) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_8=SECOND_A.H3_8_p 
 AND ((LENGTH(SECOND_A.WORD_ONE)>3 AND LENGTH(SECOND_A.WORD_ONE)<30 AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.WORD_ONE,1,1)>0 )
 OR(INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.WORD_ONE,1,1)>0 AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.WORD_TWO,1,1)>0))
and( second_a.add_num=ad_base.add_num or (second_a.add_num is null and ad_base.add_num is null));

UPDATE RESULTS48 SET STAGE= '48';

CREATE TABLE RESULTS48A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS48)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS48A
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS48A Where SECOND_A.ID = RESULTS48A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS48";
-- add some non number queries




CREATE TABLE RESULTS49 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|[.]', '')) - SYS.UTL_MATCH.JARO_WINKLER(regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|[.]', ''),
regexp_replace(AD_BASE.address_string_nopc,'[[:space:]]|,|[.]', '')))  /length(regexp_replace(Ad_base.address_string_nopc,'[[:space:]]|,|[.]', '')) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_8=SECOND_A.H3_8_p 
 AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.WORD_one,1,1)>0 
 AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.WORD_TWO,1,1)>0
AND AD_BASE.add_num IS NULL AND second_a.add_num IS NULL
AND (INSTR(SECOND_A.ADDRESS_STRING,ad_base.ABBR_STREET1,1,1)>0 
OR INSTR(SECOND_A.ADDRESS_STRING,AD_BASE.DESCRIPTION,1,1)>0);--CONSIDER REVERSING INSTR SEARCH AS A WAY TO AVOID HIGH CRESENT NORTH MATCHING HIGH CRESCENT19-08-22

UPDATE RESULTS49 SET STAGE= '49';

CREATE TABLE RESULTS49a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS49)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1 and score1>0.85
ORDER BY ID,ADDRESS_STRING, ADDRESS_STRING_NOPC;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS49A Where SECOND_A.ID = RESULTS49A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS49";

ALTER TABLE RESULTS49A
COMPRESS;

CREATE TABLE RESULTS50 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(SECOND_A.ADDRESS_STRING) - 
SYS.UTL_MATCH.JARO_WINKLER(SECOND_A.ADDRESS_STRING,AD_BASE.address_string_nopc))  /length(Ad_base.address_string_nopc) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_8=SECOND_A.H3_8_p 
--AND (length(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'[[:space:]]|,|.', '')) - SYS.UTL_MATCH.JARO_WINKLER(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'[[:space:]]|,|.', ''),
--regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|.', '')))  /length(regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|.', ''))>0.6
 AND ((LENGTH(SECOND_A.WORD_ONE)>3 AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.WORD_ONE,1,1)>0 )OR(INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.WORD_two,1,1)>0 
 AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.WORD_TWO,1,1)>0)OR(INSTR(SECOND_A.ADDRESS_STRING,AD_BASE.WORD_ONE,1,1)>0 ))
and (SECOND_A.add_num=AD_BASE.sub_unit and AD_BASE.build_no is null)
--((INSTR(second_a.SUB_UNIT,AD_BASE.SUB_UNIT,1,1)>0 AND AD_BASE.BUILD_NO IS NULL AND SECOND_A.BUILD_NO IS NULL) 
--OR (INSTR(AD_BASE.add_num,second_a.SUB_UNIT,1,1)>0 AND SECOND_A.BUILD_NO IS NULL AND SECOND_A.BUILD_NO IS NULL)
--AND(CONVERT(second_a.SUB_UNIT,INTEGER)- CONVERT(AD_BASE.SUB_UNIT,INTEGER)=0 AND AD_BASE.BUILD_NO IS NULL AND SECOND_A.BUILD_NO IS NULL

--AND (AD_BASE.add_num IS NULL AND second_a.add_num IS NULL)  
--AND INSTR(second_a.add_num,AD_BASE.add_num,1,1)>0
AND (INSTR(SECOND_A.ADDRESS_STRING,ad_base.ABBR_STREET1,1,1)>0 OR INSTR(SECOND_A.ADDRESS_STRING,AD_BASE.DESCRIPTION,1,1)>0);
--AND (INSTR(replace(SECOND_A.ADDRESS_STRING,' ',''),replace(ad_base.DESCRIPTION,' ',''),1,1)>0 or instr(replace(SECOND_A.ADDRESS_STRING,' ',''),replace(ad_base.ABBR_STREET1,' ',''),1,1)>0);

UPDATE RESULTS50 SET STAGE= '50';

CREATE TABLE RESULTS50a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS50)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1 and score1>0.85
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS50A Where SECOND_A.ID = RESULTS50A.ID);
COMMIT;


drop table "MARTIR03"."RESULTS50";
ALTER TABLE RESULTS50A
COMPRESS;

CREATE TABLE RESULTS51 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|[.]', '')) - SYS.UTL_MATCH.JARO_WINKLER(regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|[.]', ''),
regexp_replace(AD_BASE.address_string_nopc,'[[:space:]]|,|[.]', '')))  /length(regexp_replace(Ad_base.address_string_nopc,'[[:space:]]|,|[.]', '')) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_8=SECOND_A.H3_8_p 
 AND ((LENGTH(SECOND_A.WORD_ONE)>3 AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.WORD_ONE,1,1)>0 )OR(INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.WORD_two,1,1)>0 
 AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.WORD_TWO,1,1)>0)OR(INSTR(SECOND_A.ADDRESS_STRING,AD_BASE.WORD_ONE,1,1)>0 ))
and (regexp_replace(second_a.add_num,'[[:space:]]|,|[.]', '')=regexp_replace(ad_base.add_num,'[[:space:]]|,|[.]', '')
or (regexp_replace(second_a.SUB_UNIT,'[[:space:]]|,|[.]', '')=regexp_replace(AD_BASE.SUB_UNIT,'[[:space:]]|,|[.]', '') AND AD_BASE.BUILD_NO IS NULL AND SECOND_A.BUILD_NO IS NULL)) 
AND (INSTR(SECOND_A.ADDRESS_STRING,ad_base.ABBR_STREET1,1,1)>0 OR INSTR(SECOND_A.ADDRESS_STRING,AD_BASE.DESCRIPTION,1,1)>0);

UPDATE RESULTS51 SET STAGE= '51';

CREATE TABLE RESULTS51a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS51)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS51A Where SECOND_A.ID = RESULTS51A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS51";

ALTER TABLE RESULTS51A COMPRESS;

CREATE TABLE RESULTS52 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'[[:space:]]|,|[.]', '')) - SYS.UTL_MATCH.JARO_WINKLER(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'[[:space:]]|,|[.]', ''),
regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|[.]', '')))  /length(regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|[.]', '')) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_6=SECOND_A.H3_6_p 
 AND ((LENGTH(SECOND_A.WORD_ONE)>3 AND INSTR(SECOND_A.ADDRESS_STRING,ad_base.WORD_ONE,1,1)>0 )and(INSTR(SECOND_A.ADDRESS_STRING,ad_base.WORD_two,1,1)>0 ))
and( second_a.add_num=ad_base.add_num or (second_a.add_num is null and ad_base.add_num is null) or regexp_replace(AD_BASE.ADD_num,'[[:space:]]|,|[.]', '')=regexp_replace(second_a.ADD_num,'[[:space:]]|,|[.]', ''))
AND (INSTR(replace(SECOND_A.ADDRESS_STRING,' ',''),replace(ad_base.DESCRIPTION,' ',''),1,1)>0 or INSTR(replace(SECOND_A.ADDRESS_STRING,' ',''),replace(ad_base.ABBR_STREET1,' ',''),1,1)>0);

UPDATE RESULTS52 SET STAGE= '52';

CREATE TABLE RESULTS52a AS SELECT DISTINCT ID,stage,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID,stage, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS52)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1 
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS52A Where SECOND_A.ID = RESULTS52A.ID);
COMMIT;

drop table "MARTIR03"."RESULTS52";

ALTER TABLE RESULTS52A COMPRESS;


CREATE TABLE RESULTS53 AS SELECT 
SECOND_A.ID,
SECOND_A.ADDRESS_STRING,
SECOND_A.STAGE,
SECOND_A.ADD_NUM as in_num,
SECOND_A.RANGE_LOWER,
SECOND_A.RANGE_UPPER,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
second_a.current_line2,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  (length(TRIM(LEADING FROM SECOND_A.Current_line1)) - 
  UTL_MATCH.jaro_winkler(AD_BASE.ADDRESS_line_1,TRIM(LEADING FROM SECOND_A.Current_line1)))
  /length(AD_BASE.ADDRESS_line_1) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_6=SECOND_A.H3_6_p 
and((second_a.sub_unit is not null and second_a.build_no is null) and (AD_BASE.ADD_NUM = SECOND_A.SUB_UNIT))
AND (INSTR(SECOND_A.ADDRESS_STRING,AD_BASE.description,1,1)>0 
or instr(SECOND_A.ADDRESS_STRING,ad_base.ABBR_STREET1,1,1)>0)
and instr(SECOND_A.ADDRESS_STRING,AD_BASE.post_town ,1,1)>0;

UPDATE RESULTS53 SET STAGE= '53';

CREATE TABLE RESULTS53a AS SELECT DISTINCT ID,stage,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID,stage, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS53)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1 and score1>0.7
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS53A Where SECOND_A.ID = RESULTS53A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS53";

ALTER TABLE RESULTS52A COMPRESS;

CREATE TABLE RESULTS54 AS SELECT 
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.CURRENT_LINE1,
AD_BASE.ADDRESS_LINE_1,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
(length(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'[[:space:]]|,|[.]', '')) - SYS.UTL_MATCH.JARO_WINKLER(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'[[:space:]]|,|[.]', ''),
regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|[.]', '')))  /length(regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|[.]', '')) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_7=SECOND_A.H3_7_p 
--AND (length(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'[[:space:]]|,|.', '')) - SYS.UTL_MATCH.JARO_WINKLER(regexp_replace(AD_BASE.ADDRESS_STRING_NOPC,'[[:space:]]|,|.', ''),
--regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|.', '')))  /length(regexp_replace(SECOND_A.ADDRESS_STRING,'[[:space:]]|,|.', ''))>0.6
 AND ((LENGTH(SECOND_A.WORD_ONE)>3 AND INSTR(SECOND_A.ADDRESS_STRING,ad_base.WORD_ONE,1,1)>0 )and(INSTR(SECOND_A.ADDRESS_STRING,ad_base.WORD_two,1,1)>0 ))
and( second_a.add_num=ad_base.add_num or (second_a.add_num is null and ad_base.add_num is null) or regexp_replace(AD_BASE.ADD_num,'[[:space:]]|,|[.]', '')=regexp_replace(second_a.ADD_num,'[[:space:]]|,|[.]', ''
)
or ((second_a.sub_unit is not null and second_a.build_no is null) and (AD_BASE.ADD_NUM = SECOND_A.SUB_UNIT)))
AND (INSTR(replace(SECOND_A.ADDRESS_STRING,' ',''),replace(ad_base.DESCRIPTION,' ',''),1,1)>0 or INSTR(replace(SECOND_A.ADDRESS_STRING,' ',''),replace(ad_base.ABBR_STREET1,' ',''),1,1)>0);
------
UPDATE RESULTS54 SET STAGE= '54';

CREATE TABLE RESULTS54a AS SELECT DISTINCT ID,stage,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID,stage, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS54)
WHERE SCORE1 = MAX_SCORE 
AND COUNT_P_UPRN =1 and score1>0.65
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS54A Where SECOND_A.ID = RESULTS54A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS54";

ALTER TABLE RESULTS54A COMPRESS;
------
CREATE TABLE RESULTS55 AS SELECT 
SECOND_A.ID,
SECOND_A.ADDRESS_STRING,
SECOND_A.STAGE,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
AD_BASE.WORD_ONE,
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC ,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
  UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1,
  UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_8=SECOND_A.H3_8_p 
--AND INSTR(AD_BASE.ADD_NUM,SECOND_A.ADD_NUM,1,1)>0
AND (REGEXP_INSTR(SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2,'HOUSE',1,1)>0 
AND REGEXP_INSTR(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,'HOUSE',1,1)>0 )
AND AD_BASE.CLASSIFICATION_TERTIARY= 'Care / Nursing Home' ;

CREATE TABLE RESULTS55B AS SELECT 
SECOND_A.ID,
SECOND_A.ADDRESS_STRING,
SECOND_A.STAGE,
AD_BASE.WORD_ONE,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC ,
   UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
  UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_10=SECOND_A.H3_10_p 
AND REGEXP_INSTR(SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2,'HOME',1,1)>0 
AND REGEXP_INSTR(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,'HOME',1,1)>0 
AND AD_BASE.CLASSIFICATION_TERTIARY= 'Care / Nursing Home' ;

CREATE TABLE RESULTS55C AS SELECT 
SECOND_A.ID,
SECOND_A.ADDRESS_STRING,
SECOND_A.STAGE,
AD_BASE.WORD_ONE,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC ,
   UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
  UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_10=SECOND_A.H3_10_p 
AND REGEXP_INSTR(SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2,'N /HO| C HME| NRS HME|R H|REST HOME|R/HOME|OPH| CARE UNIT| CARE CENTRE 
|C/ CENTRE | CARE HOME| C H| CH|CARE H|C/HOME|C/HOME|C HOME|CARE',1,1)>0 
AND REGEXP_INSTR(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,'RESIDENTIAL|CARE HOME|NURSING HOME',1,1)>0 
AND AD_BASE.CLASSIFICATION_TERTIARY= 'Care / Nursing Home' ;

CREATE TABLE RESULTS55D AS SELECT 
SECOND_A.ID,
SECOND_A.ADDRESS_STRING,
SECOND_A.STAGE,
AD_BASE.WORD_ONE,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC ,
   UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
  UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_10=SECOND_A.H3_10_p 
AND REGEXP_INSTR(SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2,'CENTRE|CARE| RESIDENTIAL|UNIT|RESIDENTIAL|CARE HOME|NURSING HOME',1,1)>0 
AND REGEXP_INSTR(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,'CENTRE|CARE| RESIDENTIAL|UNIT|RESIDENTIAL|CARE HOME|NURSING HOME',1,1)>0 
AND AD_BASE.CLASSIFICATION_TERTIARY= 'Care / Nursing Home' ;

CREATE TABLE RESULTS55E AS SELECT 
SECOND_A.ID,
SECOND_A.ADDRESS_STRING,
SECOND_A.STAGE,
AD_BASE.WORD_ONE,
SECOND_A.ADD_NUM as in_num,
ad_base.description,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC ,
   UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)) - 
  UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2)))
  /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2) as score1
FROM SECOND_A,AD_BASE
WHERE AD_BASE.h3_10=SECOND_A.H3_10_p 
AND REGEXP_INSTR(SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2,'N/ HOME|N /HO|C HME| NRS HME| R H|REST HOME|RESIDENTIAL |RES HOME|R/HOME|R H|RESIDENTIAL|CARE HOME|NURSING HOME|OPH |NURSING|NURSING H|NURSING/H|NURS H | N/H|N H|NURSING HOME|NURSING HO|
NURSING HO | N HOME|N/HOME',1,1)>0 
AND REGEXP_INSTR(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2,'N/ HOME|N /HO|C HME| NRS HME| R H|REST HOME|RESIDENTIAL |RES HOME|R/HOME|R H|RESIDENTIAL|CARE HOME|NURSING HOME|OPH |NURSING|NURSING H|NURSING/H|NURS H | N/H|N H|NURSING HOME|NURSING HO|
NURSING HO | N HOME|N/HOME',1,1)>0 
AND AD_BASE.CLASSIFICATION_TERTIARY= 'Care / Nursing Home' ;

CREATE TABLE CH_union AS 
select * from RESULTS55
union 
select * from RESULTS55B
union
select * from RESULTS55C
union 
select * from RESULTS55D
union 
select * from RESULTS55E;

drop table "MARTIR03"."RESULTS55" ;
drop table "MARTIR03"."RESULTS55B" ;
drop table "MARTIR03"."RESULTS55C" ;
drop table "MARTIR03"."RESULTS55D" ;
drop table "MARTIR03"."RESULTS55E" ;

alter table "MARTIR03"."CH_UNION" compress;

UPDATE CH_UNION SET STAGE= '55';

CREATE TABLE RESULTS55a AS SELECT DISTINCT ID,stage,UPRN,WORD_ONE,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID,stage, UPRN,PARENT_UPRN, ADDRESS_STRING,WORD_ONE, ADDRESS_STRING_NOPC, SCORE1,mAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM CH_UNION)
WHERE SCORE1 >0.5 
AND COUNT_P_UPRN =1
AND INSTR( ADDRESS_STRING_NOPC,WORD_ONE,1,1)>0
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS55A Where SECOND_A.ID = RESULTS55A.ID);
COMMIT;

drop table ch_union;

create table results57 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  (length(TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2||SECOND_A.CURRENT_LINE3)) - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2||AD_BASE.ADDRESS_LINE_3,
  TRIM(LEADING FROM SECOND_A.CURRENT_LINE1||SECOND_A.CURRENT_LINE2||SECOND_A.CURRENT_LINE3)))
  /length(AD_BASE.ADDRESS_LINE_1) as score,
  AD_BASE.ADDRESS_STRING_NOPC
FROM SECOND_A,AD_BASE
 WHERE SECOND_A.CURRENT_LINE1=AD_BASE.ADDRESS_string_nopc; 
 
 UPDATE RESULTS57 SET STAGE= '57';

CREATE TABLE RESULTS57a AS SELECT DISTINCT ID,stage,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID,stage, UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTs57)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1 
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS57A Where SECOND_A.ID = RESULTS57A.ID);
COMMIT;
drop table "MARTIR03"."RESULTS57";

ALTER TABLE RESULTS57A COMPRESS;
 
 create table results_neigh1 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  AD_BASE.LOCALITY,
  ad_base.post_town,
  (length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) 
 - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2||AD_BASE.ADDRESS_LINE_3||AD_BASE.POST_TOWN,TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))
 /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2||AD_BASE.ADDRESS_LINE_3||AD_BASE.POST_TOWN) as score1
FROM SECOND_A,AD_BASE
 WHERE 
  INSTR(SECOND_A.NEIGHBOURS,ad_base.h3_4,1,1)>0
 and ad_base.Add_num=second_a.add_num
AND( INSTR(SECOND_A.address_string ,AD_BASE.post_town,1,1)>0 OR INSTR(SECOND_A.address_string ,AD_BASE.LOCALITY,1,1)>0)
AND (instr(SECOND_A.ADDRESS_STRING,AD_BASE.DESCRIPTION,1,1)>0 OR instr(SECOND_A.ADDRESS_STRING,ad_base.ABBR_STREET1,1,1)>0);

create table results_neigh2 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  AD_BASE.LOCALITY,
  ad_base.post_town,
  (length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) 
 - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2||AD_BASE.ADDRESS_LINE_3||AD_BASE.POST_TOWN,TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))
 /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2||AD_BASE.ADDRESS_LINE_3||AD_BASE.POST_TOWN) as score1
FROM SECOND_A,AD_BASE
 WHERE 
  INSTR(SECOND_A.NEAR_NEIGHBOURS,ad_base.h3_4,1,1)>0
 and ad_base.Add_num=second_a.add_num
AND( INSTR(SECOND_A.address_string ,AD_BASE.post_town,1,1)>0 OR INSTR(SECOND_A.address_string ,AD_BASE.LOCALITY,1,1)>0)
AND (instr(SECOND_A.ADDRESS_STRING,AD_BASE.DESCRIPTION,1,1)>0 OR instr(SECOND_A.ADDRESS_STRING,ad_base.ABBR_STREET1,1,1)>0);
 
 create table results_neigh3 as SELECT DISTINCT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
AD_BASE.ADD_NUM, 
  AD_BASE.UPRN,
  AD_BASE.PARENT_UPRN,
  AD_BASE.ADDRESS_STRING_NOPC,
  AD_BASE.LOCALITY,
  ad_base.post_town,
  (length(TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)) 
 - UTL_MATCH.EDIT_DISTANCE(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2||AD_BASE.ADDRESS_LINE_3||AD_BASE.POST_TOWN,TRIM(LEADING FROM SECOND_A.ADDRESS_STRING)))
 /length(AD_BASE.ADDRESS_LINE_1||AD_BASE.ADDRESS_LINE_2||AD_BASE.ADDRESS_LINE_3||AD_BASE.POST_TOWN) as score1
FROM SECOND_A,AD_BASE
 WHERE 
  INSTR(SECOND_A.NEAR_NEIGHBOURS,ad_base.h3_4,1,1)>0
 and ad_base.build_no=second_a.build_no
AND( INSTR(SECOND_A.address_string ,AD_BASE.post_town,1,1)>0 OR INSTR(SECOND_A.address_string ,AD_BASE.LOCALITY,1,1)>0)
AND (instr(SECOND_A.ADDRESS_STRING,AD_BASE.DESCRIPTION,1,1)>0 OR instr(SECOND_A.ADDRESS_STRING,ad_base.ABBR_STREET1,1,1)>0);
 
 CREATE TABLE TEST AS 
select * from RESULTS_NEIGH1
union 
select * from RESULTS_NEIGH2
union 
select * from RESULTS_NEIGH3;
UPDATE TEST SET STAGE= '3.1';  

drop table "MARTIR03"."RESULTS_NEIGH1" ;
drop table "MARTIR03"."RESULTS_NEIGH2" ;
drop table "MARTIR03"."RESULTS_NEIGH3" ;

CREATE TABLE RESULTS3AA AS SELECT DISTINCT STAGE, ID, UPRN, PARENT_UPRN,ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE1, MAX_SCORE FROM(
SELECT STAGE,ID, UPRN, PARENT_UPRN,ADDRESS_STRING,  ADDRESS_STRING_NOPC, SCORE1,
       MAX(SCORE1) OVER (PARTITION BY ID) AS MAX_SCORE
   FROM TEST)
   WHERE SCORE1 = MAX_SCORE and score1>0.75
 ORDER BY ID, ADDRESS_STRING_NOPC;
 
 ALTER TABLE RESULTS3AA COMPRESS;
 
DELETE FROM SECOND_A
WHERE EXISTS( SELECT 1 FROM RESULTS3AA Where SECOND_A.ID = RESULTS3AA.ID);
COMMIT;
drop table "MARTIR03"."TEST" ; 
 ----
 ----
 CREATE TABLE RESULTS58 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  REGEXP_SUBSTR(second_a.current_line1,'[[:alpha:]].*') TEST_STREET,
  UTL_MATCH.jaro_winkler(REGEXP_SUBSTR(second_a.current_line1,'[[:alpha:]].*'),ad_base.ABBR_STREET1) as score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
AND UTL_MATCH.jaro_winkler(REGEXP_SUBSTR(second_a.current_line1,'[[:alpha:]].*'),ad_base.ABBR_STREET1)>0.85
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM; 

UPDATE RESULTS58 SET STAGE= '58';

CREATE TABLE RESULTS58a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS58)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS58a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS58a Where SECOND_A.ID = RESULTS58a.ID);
COMMIT;


CREATE TABLE RESULTS59 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  REGEXP_SUBSTR(second_a.current_line2,'[[:alpha:]].*') TEST_STREET,
  UTL_MATCH.jaro_winkler(REGEXP_SUBSTR(second_a.current_line2,'[[:alpha:]].*'),ad_base.ABBR_STREET1) as score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
AND UTL_MATCH.jaro_winkler(REGEXP_SUBSTR(second_a.current_line2,'[[:alpha:]].*'),ad_base.ABBR_STREET1)>0.85
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM; 

UPDATE RESULTS59 SET STAGE= '59';

CREATE TABLE RESULTS59a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS59)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS59a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS59a Where SECOND_A.ID = RESULTS59a.ID);
COMMIT;
drop table "MARTIR03"."RESULTS59";

CREATE TABLE RESULTS60 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  REGEXP_SUBSTR(SECOND_A.CURRENT_LINE3,'[[:alpha:]].*') TEST_STREET,
  UTL_MATCH.jaro_winkler(REGEXP_SUBSTR(second_a.current_line3,'[[:alpha:]].*'),ad_base.ABBR_STREET1) as score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
AND UTL_MATCH.jaro_winkler(REGEXP_SUBSTR(second_a.current_line3,'[[:alpha:]].*'),ad_base.ABBR_STREET1)>0.85
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM; 

UPDATE RESULTS60 SET STAGE= '60';

CREATE TABLE RESULTS60a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS60)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS60a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS60a Where SECOND_A.ID = RESULTS60a.ID);
COMMIT;
drop table "MARTIR03"."RESULTS60";

CREATE TABLE RESULTS61 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  (length(SECOND_A.ADDRESS_STRING)-
  (UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||ad_base.ABBR_STREET1||' '||AD_BASE.POST_TOWN)))
  /length(ad_base.ADDRESS_LINE_1||' '||ad_base.ABBR_STREET1||' '||AD_BASE.POST_TOWN) as score,
  UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_6=SECOND_A.H3_6_p
AND UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||ad_base.ABBR_STREET1||' '||AD_BASE.POST_TOWN)>0.8
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM; 

UPDATE RESULTS61 SET STAGE= '61';

CREATE TABLE RESULTS61a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,str_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, STR_SCORE,ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS61)
WHERE SCORE = MAX_SCORE and str_score>0.8
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS61a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS61a Where SECOND_A.ID = RESULTS61a.ID);
COMMIT;
drop table "MARTIR03"."RESULTS61";
 
 -----new bits
 create table word_test1 as  select UPRN,PARENT_UPRN,ID, SECOND_A.STAGE,AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3) AS SCORE,
substr(SECOND_A.ADDRESS_STRING,length(ad_base.ADDRESS_STRING_NOPC)-length(second_a.ADDRESS_STRING)) AS test
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
and SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3)>0.85
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[0-9]')=0
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(sECOND_A.address_string ,ad_base.word_one,1,1)>0
and length(ad_base.word_one)>3
AND instr(sECOND_A.address_string ,ad_base.word_two,1,1)>0
and length(ad_base.word_two)>3
AND instr(ad_base.address_string_nopc ,second_a.word_one,1,1)>0
and length(ad_base.word_one)>3
AND instr(ad_base.address_string_nopc ,second_a.word_two,1,1)>0
and length(ad_base.word_two)>3
and AD_BASE.ADD_NUM is null 
and SECOND_A.ADD_NUM is null;

create table word_test2 as select UPRN,PARENT_UPRN,ID, SECOND_A.STAGE,AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3) AS SCORE,
substr(SECOND_A.ADDRESS_STRING,length(ad_base.ADDRESS_STRING_NOPC)-length(second_a.ADDRESS_STRING)) AS test
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
and SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3)>0.84
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[0-9]')=0
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m ||sECOND_A.word_three_m,ad_base.word_one_m,1,1)>0
and length(ad_base.word_one)>3
AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m ||sECOND_A.word_three_m,ad_base.word_two_m,1,1)>0
and length(ad_base.word_two)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m ||ad_base.word_three_m,second_a.word_one_m,1,1)>0
and length(ad_base.word_one)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m ||ad_base.word_three_m,second_a.word_two_m,1,1)>0
and length(ad_base.word_two)>3
and AD_BASE.ADD_NUM is null 
and SECOND_A.ADD_NUM is null;
--AND regex_like(ad_base.ADDRESS_LINE_3,SECOND_A.address_string)

create table word_test3 as select UPRN,PARENT_UPRN,ID, SECOND_A.STAGE,AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3) AS SCORE,
substr(SECOND_A.ADDRESS_STRING,length(ad_base.ADDRESS_STRING_NOPC)-length(second_a.ADDRESS_STRING)) AS test
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
and UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3)>0.84
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[0-9]')=0
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(sECOND_A.word_one_m||sECOND_A.word_one_m ,ad_base.word_one_m,1,1)>0
and length(ad_base.word_one)>3
--AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m ,ad_base.word_two_m,1,1)>0
--and length(ad_base.word_two)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m ,second_a.word_one_m,1,1)>0
and length(ad_base.word_one)>3
--AND instr(ad_base.word_one_m||ad_base.word_two_m ,second_a.word_two_m,1,1)>0
--and length(ad_base.word_two)>3
and AD_BASE.ADD_NUM is null 
and SECOND_A.ADD_NUM is null;


create table word_test4 as select UPRN,PARENT_UPRN,ID,SECOND_A.STAGE, AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3) AS SCORE,
substr(SECOND_A.ADDRESS_STRING,length(ad_base.ADDRESS_STRING_NOPC)-length(second_a.ADDRESS_STRING)) AS test
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
and UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3)>0.84
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[0-9]')=0
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m||sECOND_A.word_three_m ||sECOND_A.word_four_m,ad_base.word_one_m,1,1)>0
and length(ad_base.word_one)>3
AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m||sECOND_A.word_three_m||sECOND_A.word_four_m ,ad_base.word_two_m,1,1)>0
and length(ad_base.word_two)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m||ad_base.word_three_m||ad_base.word_four_m ,second_a.word_one_m,1,1)>0
and length(ad_base.word_one)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m||ad_base.word_three_m||ad_base.word_four_m ,second_a.word_two_m,1,1)>0
and length(ad_base.word_two)>3
and AD_BASE.ADD_NUM is null 
and SECOND_A.ADD_NUM is null;

create table word_test5 as select UPRN,PARENT_UPRN,ID,SECOND_A.STAGE, AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.post_town,SECOND_A.current_line1||' '||SECOND_A.current_line3) AS SCORE,
substr(SECOND_A.ADDRESS_STRING,length(ad_base.ADDRESS_STRING_NOPC)-length(second_a.ADDRESS_STRING)) AS test
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
and UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.post_town,SECOND_A.current_line1||' '||SECOND_A.current_line3)>0.84
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[0-9]')=0
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m||sECOND_A.word_three_m ||sECOND_A.word_four_m,ad_base.word_one_m,1,1)>0
and length(ad_base.word_one)>3
AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m||sECOND_A.word_three_m||sECOND_A.word_four_m ,ad_base.word_two_m,1,1)>0
and length(ad_base.word_two)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m||ad_base.word_three_m||ad_base.word_four_m ,second_a.word_one_m,1,1)>0
and length(ad_base.word_one)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m||ad_base.word_three_m||ad_base.word_four_m ,second_a.word_two_m,1,1)>0
and length(ad_base.word_two)>3
and AD_BASE.ADD_NUM is null 
and SECOND_A.ADD_NUM is null;

CREATE TABLE TEST_word_union AS 
select * from word_test1
union 
select * from word_test2
union
select * from word_test3
union 
select * from word_test4
union
select * from word_test5;
drop table "MARTIR03"."WORD_TEST1" ;
drop table "MARTIR03"."WORD_TEST2" ;
drop table "MARTIR03"."WORD_TEST3" ;
drop table "MARTIR03"."WORD_TEST4" ;
drop table "MARTIR03"."WORD_TEST5" ;
alter table "MARTIR03"."TEST_WORD_UNION" compress;

UPDATE TEST_WORD_UNION SET STAGE= '62';

CREATE TABLE RESULTS62a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM TEST_WORD_UNION)
WHERE SCORE = MAX_SCORE
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS62a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS62a Where SECOND_A.ID = RESULTS62a.ID);
COMMIT;
drop table "MARTIR03"."TEST_WORD_UNION";
----more

create table test_one as select ID,STAGE,UPRN,PARENT_UPRN, AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_1,SECOND_A.CURRENT_LINE2) AS SCORE 
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
AND regexp_INSTR(second_a.CURRENT_LINE1, '+[0-9]')>0
AND regexp_INSTR(second_a.CURRENT_LINE1, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(ad_base.ADDRESS_STRING_NOPC,SECOND_A.CURRENT_LINE1,1,1)>0
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM;

create table test_two as select ID,STAGE,UPRN,PARENT_UPRN, AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_1,SECOND_A.CURRENT_LINE2) AS SCORE
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
AND regexp_INSTR(second_a.CURRENT_LINE2, '+[0-9]')>0
AND regexp_INSTR(second_a.CURRENT_LINE2, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(ad_base.ADDRESS_STRING_NOPC,SECOND_A.CURRENT_LINE2,1,1)>0
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM;

create table test_three as select ID,STAGE,UPRN,PARENT_UPRN, AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING ,
UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_1,SECOND_A.CURRENT_LINE2) AS SCORE
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
AND regexp_INSTR(second_a.CURRENT_LINE3, '+[0-9]')>0
AND regexp_INSTR(SECOND_A.CURRENT_LINE3, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(ad_base.ADDRESS_STRING_NOPC,SECOND_A.CURRENT_LINE3,1,1)>0
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM;

create table test_four as select ID,STAGE,UPRN,PARENT_UPRN, AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_1,SECOND_A.CURRENT_LINE2) AS SCORE
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
AND regexp_INSTR(second_a.CURRENT_LINE2, '+[0-9]')>0
AND regexp_INSTR(second_a.CURRENT_LINE2, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_1,SECOND_A.CURRENT_LINE2)<3
AND UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_1,SECOND_A.CURRENT_LINE2)>=0
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM;

create table test_five as select ID,STAGE,UPRN,PARENT_UPRN,AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_2,SECOND_A.CURRENT_LINE2) AS SCORE
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
AND regexp_INSTR(second_a.CURRENT_LINE2, '+[0-9]')>0
AND regexp_INSTR(second_a.CURRENT_LINE2, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_2,SECOND_A.CURRENT_LINE2)<3
AND UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_2,SECOND_A.CURRENT_LINE2)>=0
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM;

create table test_six as select ID,STAGE,UPRN,PARENT_UPRN, AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_2,SECOND_A.CURRENT_LINE1) AS SCORE
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
AND regexp_INSTR(second_a.CURRENT_LINE1, '+[0-9]')>0
AND regexp_INSTR(second_a.CURRENT_LINE1, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_2,SECOND_A.CURRENT_LINE1)<3
AND UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_2,SECOND_A.CURRENT_LINE1)>=0
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM;


create table test_seven as select ID,STAGE,UPRN,PARENT_UPRN, AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_1,SECOND_A.CURRENT_LINE1) AS SCORE
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
AND regexp_INSTR(second_a.CURRENT_LINE1, '+[0-9]')=0
AND regexp_INSTR(second_a.CURRENT_LINE1, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_1,SECOND_A.CURRENT_LINE1)<2
AND UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_1,SECOND_A.CURRENT_LINE1)>=0
AND AD_BASE.ADD_NUM is null and SECOND_A.ADD_NUM is null;

create table test_eight as select ID,STAGE,UPRN,PARENT_UPRN, AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1,SECOND_A.CURRENT_LINE2) AS SCORE
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
AND regexp_INSTR(second_a.CURRENT_LINE2, '+[0-9]')=0
AND regexp_INSTR(second_a.CURRENT_LINE2, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_1,SECOND_A.CURRENT_LINE2)<3
AND UTL_MATCH.EDIT_DISTANCE(ad_base.ADDRESS_LINE_1,SECOND_A.CURRENT_LINE2)>=0
AND AD_BASE.ADD_NUM is null and SECOND_A.ADD_NUM is null;

 CREATE TABLE TEST_union AS 
select * from test_one
union 
select * from test_two
union
select * from test_three
union 
select * from test_four
union
select * from test_five
union 
select * from test_six
union
select * from test_seven
union 
select * from test_eight;

drop table "MARTIR03"."TEST_ONE";  
drop table "MARTIR03"."TEST_TWO" ; 
drop table "MARTIR03"."TEST_THREE";  
drop table "MARTIR03"."TEST_FOUR";  
drop table "MARTIR03"."TEST_FIVE";  
drop table "MARTIR03"."TEST_SIX";  
drop table "MARTIR03"."TEST_SEVEN";
drop table "MARTIR03"."TEST_EIGHT"; 

alter table "MARTIR03"."TEST_UNION" compress;

UPDATE TEST_union SET STAGE= '63'; 
 
 CREATE TABLE RESULTS63a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM TEST_UNION)
WHERE SCORE = MAX_SCORE
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS63a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS63a Where SECOND_A.ID = RESULTS63a.ID);
COMMIT;
drop table "MARTIR03"."TEST_UNION";
 
 
 create table word_test6 as  select ID, STAGE,UPRN,PARENT_UPRN,AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3) AS SCORE,
substr(SECOND_A.ADDRESS_STRING,length(ad_base.ADDRESS_STRING_NOPC)-length(second_a.ADDRESS_STRING)) AS test
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
--and SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3)>0.7
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[0-9]')=0
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(sECOND_A.address_string ,ad_base.word_one,1,1)>0
and length(ad_base.word_one)>3
AND instr(sECOND_A.address_string ,ad_base.word_two,1,1)>0
and length(ad_base.word_two)>3
AND instr(ad_base.address_string_nopc ,second_a.word_one,1,1)>0
and length(ad_base.word_one)>3
AND instr(ad_base.address_string_nopc ,second_a.word_two,1,1)>0
and length(ad_base.word_two)>3
and AD_BASE.ADD_NUM =SECOND_A.ADD_NUM;

create table word_test7 as select ID, STAGE,UPRN,PARENT_UPRN,AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3) AS SCORE,
substr(SECOND_A.ADDRESS_STRING,length(ad_base.ADDRESS_STRING_NOPC)-length(second_a.ADDRESS_STRING)) AS test
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
and SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3)>0.55
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[0-9]')=0
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m ||sECOND_A.word_three_m,ad_base.word_one_m,1,1)>0
and length(ad_base.word_one)>3
AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m ||sECOND_A.word_three_m,ad_base.word_two_m,1,1)>0
and length(ad_base.word_two)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m ||ad_base.word_three_m,second_a.word_one_m,1,1)>0
and length(ad_base.word_one)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m ||ad_base.word_three_m,second_a.word_two_m,1,1)>0
and length(ad_base.word_two)>3
and AD_BASE.ADD_NUM =SECOND_A.ADD_NUM;
--AND regex_like(ad_base.ADDRESS_LINE_3,SECOND_A.address_string)

create table word_test8 as select ID, STAGE,UPRN,PARENT_UPRN,AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3) AS SCORE,
substr(SECOND_A.ADDRESS_STRING,length(ad_base.ADDRESS_STRING_NOPC)-length(second_a.ADDRESS_STRING)) AS test
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
and UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3)>0.84
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[0-9]')=0
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(sECOND_A.word_one_m||sECOND_A.word_one_m ,ad_base.word_one_m,1,1)>0
and length(ad_base.word_one)>3
--AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m ,ad_base.word_two_m,1,1)>0
--and length(ad_base.word_two)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m ,second_a.word_one_m,1,1)>0
and length(ad_base.word_one)>3
--AND instr(ad_base.word_one_m||ad_base.word_two_m ,second_a.word_two_m,1,1)>0
--and length(ad_base.word_two)>3
and AD_BASE.ADD_NUM =SECOND_A.ADD_NUM;

create table word_test9 as select ID, STAGE,UPRN,PARENT_UPRN,AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3) AS SCORE,
substr(SECOND_A.ADDRESS_STRING,length(ad_base.ADDRESS_STRING_NOPC)-length(second_a.ADDRESS_STRING)) AS test
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
--and UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.ADDRESS_LINE_3,SECOND_A.current_line1||' '||SECOND_A.current_line3)>0.84
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[0-9]')=0
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m||sECOND_A.word_three_m ||sECOND_A.word_four_m,ad_base.word_one_m,1,1)>0
and length(ad_base.word_one)>3
AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m||sECOND_A.word_three_m||sECOND_A.word_four_m ,ad_base.word_two_m,1,1)>0
and length(ad_base.word_two)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m||ad_base.word_three_m||ad_base.word_four_m ,second_a.word_one_m,1,1)>0
and length(ad_base.word_one)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m||ad_base.word_three_m||ad_base.word_four_m ,second_a.word_two_m,1,1)>0
and length(ad_base.word_two)>3
and AD_BASE.ADD_NUM =SECOND_A.ADD_NUM;

create table word_test10 as select ID, STAGE,UPRN,PARENT_UPRN,AD_BASE.ADDRESS_STRING_NOPC, SECOND_A.ADDRESS_STRING,
SYS.UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.post_town,SECOND_A.current_line1||' '||SECOND_A.current_line3) AS SCORE,
substr(SECOND_A.ADDRESS_STRING,length(ad_base.ADDRESS_STRING_NOPC)-length(second_a.ADDRESS_STRING)) AS test
from ad_base, SECOND_A 
where AD_BASE.H3_6=SECOND_A.H3_6_P 
--and UTL_MATCH.JARO_WINKLER(ad_base.ADDRESS_LINE_1||ad_base.post_town,SECOND_A.current_line1||' '||SECOND_A.current_line3)>0.84
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[0-9]')=0
--AND regexp_INSTR(SECOND_A.ADDRESS_STRING, '+[A-Z]')>0
--AND second_a.CURRENT_LINE2 !=AD_BASE.POST_TOWN
AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m||sECOND_A.word_three_m ||sECOND_A.word_four_m,ad_base.word_one_m,1,1)>0
and length(ad_base.word_one)>3
AND instr(sECOND_A.word_one_m||sECOND_A.word_two_m||sECOND_A.word_three_m||sECOND_A.word_four_m ,ad_base.word_two_m,1,1)>0
and length(ad_base.word_two)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m||ad_base.word_three_m||ad_base.word_four_m ,second_a.word_one_m,1,1)>0
and length(ad_base.word_one)>3
AND instr(ad_base.word_one_m||ad_base.word_two_m||ad_base.word_three_m||ad_base.word_four_m ,second_a.word_two_m,1,1)>0
and length(ad_base.word_two)>3
and AD_BASE.ADD_NUM =SECOND_A.ADD_NUM;

CREATE TABLE TEST_word_union2 AS 
select * from word_test6
union 
select * from word_test7
union
select * from word_test8
union 
select * from word_test9
union
select * from word_test10;

alter table "MARTIR03"."TEST_WORD_UNION2" compress;
UPDATE TEST_word_union2 SET STAGE= '64'; 
 
 CREATE TABLE RESULTS64a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM TEST_word_UNION2)
WHERE SCORE = MAX_SCORE
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS64a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS64a Where SECOND_A.ID = RESULTS64a.ID);
COMMIT;
drop table "MARTIR03"."TEST_WORD_UNION2";

drop table "MARTIR03"."WORD_TEST6";
drop table "MARTIR03"."WORD_TEST7";
drop table "MARTIR03"."WORD_TEST8";
drop table "MARTIR03"."WORD_TEST9";
drop table "MARTIR03"."WORD_TEST10";
 
CREATE TABLE RESULTS65 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  REGEXP_SUBSTR(second_a.current_line1,'[[:alpha:]].*') TEST_STREET,
  UTL_MATCH.jaro_winkler(REGEXP_SUBSTR(second_a.current_line1,'[[:alpha:]].*'),ad_base.ABBR_STREET1) as score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
AND UTL_MATCH.jaro_winkler(REGEXP_SUBSTR(second_a.current_line1,'[[:alpha:]].*'),ad_base.ABBR_STREET1)>0.85
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM; 

UPDATE RESULTS65 SET STAGE= '65';

CREATE TABLE RESULTS65a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS65)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS65a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS65a Where SECOND_A.ID = RESULTS65a.ID);
COMMIT;
 
drop table "MARTIR03"."RESULTS65"; 
 
 CREATE TABLE RESULTS66 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  REGEXP_SUBSTR(second_a.current_line2,'[[:alpha:]].*') TEST_STREET,
  UTL_MATCH.jaro_winkler(REGEXP_SUBSTR(second_a.current_line2,'[[:alpha:]].*'),ad_base.ABBR_STREET1) as score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
AND UTL_MATCH.jaro_winkler(REGEXP_SUBSTR(second_a.current_line2,'[[:alpha:]].*'),ad_base.ABBR_STREET1)>0.85
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM; 

UPDATE RESULTS66 SET STAGE= '66';

CREATE TABLE RESULTS66a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS66)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS66a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS66a Where SECOND_A.ID = RESULTS66a.ID);
COMMIT;
drop table "MARTIR03"."RESULTS66";
 
CREATE TABLE RESULTS67 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  REGEXP_SUBSTR(SECOND_A.CURRENT_LINE3,'[[:alpha:]].*') TEST_STREET,
  UTL_MATCH.jaro_winkler(REGEXP_SUBSTR(second_a.current_line3,'[[:alpha:]].*'),ad_base.ABBR_STREET1) as score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
AND UTL_MATCH.jaro_winkler(REGEXP_SUBSTR(second_a.current_line3,'[[:alpha:]].*'),ad_base.ABBR_STREET1)>0.85
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM; 

UPDATE RESULTS67 SET STAGE= '67';

CREATE TABLE RESULTS67A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS67)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS67A
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS67a Where SECOND_A.ID = RESULTS67a.ID);
COMMIT;
drop table "MARTIR03"."RESULTS67";
 
--CREATE TABLE RESULTS68 AS SELECT
--SECOND_A.ID,
--SECOND_A.STAGE,
--SECOND_A.ADDRESS_STRING,
--SECOND_A.ADD_NUM as in_num,
--ad_base.address_line_1,
--ad_base.address_line_2,
--second_a.current_line1,
--ad_base.ADD_NUM, 
--ad_base.UPRN,
--ad_base.PARENT_UPRN,
--ad_base.ADDRESS_STRING_NOPC,
--UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||ad_base.ABBR_STREET1||' '||AD_BASE.POST_TOWN)as score,
--UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
--ad_base.ABBR_STREET1
--FROM SECOND_A,ad_base
--WHERE ad_base.h3_6=SECOND_A.H3_6_p
--AND UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||ad_base.ABBR_STREET1||' '||AD_BASE.POST_TOWN)>0.8
--AND  UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1) >.8
--AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM; 

--UPDATE RESULTS68 SET STAGE= '68';

--CREATE TABLE RESULTS68a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,str_SCORE,COUNT_P_UPRN FROM(
--SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, STR_SCORE,ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
--DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
--FROM RESULTS68)
--WHERE SCORE = MAX_SCORE and str_score>0.8
--AND COUNT_P_UPRN =1
--ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
--ALTER TABLE RESULTS68a
--COMPRESS;

--DELETE FROM SECOND_A
--WHERE EXISTS( SELECT id FROM RESULTS68a Where SECOND_A.ID = RESULTS68a.ID);
--COMMIT;
--drop table "MARTIR03"."RESULTS68";

CREATE TABLE RESULTS69 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' ' ||ADDRESS_LINE_3||' '||POST_TOWN) as score,
  UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
AND UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' ' ||ADDRESS_LINE_3||' '||POST_TOWN)>0.75
AND UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1)>0.8
AND LENGTH(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','')))>4
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM; 


UPDATE RESULTS69 SET STAGE= '69';

CREATE TABLE RESULTS69a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,str_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, STR_SCORE,ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS69)
WHERE SCORE = MAX_SCORE and str_score>0.8 AND MAX_SCORE >0.8
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS69a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS69a Where SECOND_A.ID = RESULTS69a.ID);
COMMIT;
drop table "MARTIR03"."RESULTS69";


CREATE TABLE RESULTS70 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
   UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
   UTL_MATCH.edit_distance(regexp_REPLACE(SECOND_A.ADDRESS_STRING, '[[:space:]]','') ,regexp_REPLACE(ad_base.ADDRESS_STRING_NOPC, '[[:space:]]','')) as score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_6=SECOND_A.H3_6_p 
AND UTL_MATCH.edit_distance(regexp_REPLACE(SECOND_A.ADDRESS_STRING, '[[:space:]]','') ,regexp_REPLACE(ad_base.ADDRESS_STRING_NOPC, '[[:space:]]','')) <5
--AND UTL_MATCH.edit_distance(regexp_REPLACE(ad_base.ADDRESS_STRING_NOPC, '[[:space:]]',''),regexp_REPLACE(SECOND_A.ADDRESS_STRING, '[[:space:]]','') ) <5
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM; 


UPDATE RESULTS70 SET STAGE= '70';

CREATE TABLE RESULTS70a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,min_SCORE,str_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, STR_SCORE,ADDRESS_STRING_NOPC, SCORE,min(SCORE) OVER (PARTITION BY ID) AS Min_SCORE,
mAX(str_SCORE) OVER (PARTITION BY ID) AS MAX_str_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS70)
WHERE  score=min_score
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS70a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS70a Where SECOND_A.ID = RESULTS70a.ID);
COMMIT;
drop table "MARTIR03"."RESULTS70";

CREATE TABLE RESULTS71 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' ' ||ADDRESS_LINE_3||' '||POST_TOWN) as score,
  UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
AND UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' ' ||ADDRESS_LINE_3||' '||POST_TOWN)>0.75
AND UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1)>0.8
AND LENGTH(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','')))>4
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM; 


UPDATE RESULTS71 SET STAGE= '71';

CREATE TABLE RESULTS71a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,str_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, STR_SCORE,ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS71)
WHERE str_score>0.8 AND MAX_SCORE >0.8
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS71a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS71a Where SECOND_A.ID = RESULTS71a.ID);
COMMIT;
drop table "MARTIR03"."RESULTS71";


CREATE TABLE RESULTS72 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
second_a.WORD_ONE,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
   UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
   UTL_MATCH.edit_distance(regexp_REPLACE(SECOND_A.ADDRESS_STRING, '[[:space:]]','') ,regexp_REPLACE(ad_base.ADDRESS_STRING_NOPC, '[[:space:]]','')) as score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_6=SECOND_A.H3_6_p 
AND UTL_MATCH.edit_distance(regexp_REPLACE(SECOND_A.ADDRESS_STRING, '[[:space:]]','') ,regexp_REPLACE(ad_base.ADDRESS_STRING_NOPC, '[[:space:]]',''))<4
AND UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1)>0.65
AND AD_BASE.ADD_NUM=SECOND_A.ADD_NUM; 


UPDATE RESULTS72 SET STAGE= '72';

CREATE TABLE RESULTS72a AS SELECT DISTINCT ID,STAGE,UPRN,WORD_ONE,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,min_SCORE,str_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,WORD_ONE,PARENT_UPRN, ADDRESS_STRING, STR_SCORE,ADDRESS_STRING_NOPC, SCORE,min(SCORE) OVER (PARTITION BY ID) AS Min_SCORE,
mAX(str_SCORE) OVER (PARTITION BY ID) AS MAX_str_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS72)
WHERE SCORE=MIN_SCORE AND STR_SCORE=MAX_STR_SCORE AND LENGTH(WORD_ONE)-SCORE>3
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS72a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS72a Where SECOND_A.ID = RESULTS72a.ID);
COMMIT;
drop table "MARTIR03"."RESULTS72";


CREATE TABLE RESULTS73 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' ' ||ADDRESS_LINE_2||' '||POST_TOWN) as score,
  UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
AND UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' ' ||ADDRESS_LINE_2||' '||POST_TOWN)>0.8
AND UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1)>0.8
--AND LENGTH(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','')))>4
AND (ad_base.BUILD_NO=SECOND_A.ADD_NUM OR (AD_BASE.SUB_UNIT=SECOND_A.ADD_NUM)); 


UPDATE RESULTS73 SET STAGE= '73';

CREATE TABLE RESULTS73A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,str_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, STR_SCORE,ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS73)
WHERE SCORE = MAX_SCORE and str_score>0.85 AND MAX_SCORE >0.8
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS73A
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS73A Where SECOND_A.ID = RESULTS73a.ID);
COMMIT;
drop table "MARTIR03"."RESULTS73";

CREATE TABLE RESULTS74 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||POST_TOWN) as score,
  UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
--AND UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||POST_TOWN)>0.8
AND INSTR(ad_base.ABBR_STREET1,TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),1,1)>0
--AND LENGTH(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','')))>4
AND ad_base.BUILD_NO=SECOND_A.ADD_NUM AND SECOND_A.BUILD_NO IS NULL;

CREATE TABLE RESULTS75 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||POST_TOWN) as score,
  UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE2, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
--AND UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||POST_TOWN)>0.8
AND INSTR(ad_base.ABBR_STREET1,TRIM(regexp_REPLACE(second_a.CURRENT_LINE2, '+[0-9]','') ),1,1)>0
AND LENGTH(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','')))<4
AND ad_base.BUILD_NO=SECOND_A.ADD_NUM AND SECOND_A.BUILD_NO IS NULL;

CREATE TABLE union3 AS 
select * from results74
union 
select * from results75;

UPDATE UNION3 SET STAGE= '74';

CREATE TABLE RESULTS74A AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,str_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, STR_SCORE,ADDRESS_STRING_NOPC, SCORE,mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM union3)
WHERE SCORE = MAX_SCORE 
--and str_score>0.85 AND MAX_SCORE >0.8
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS74A
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS74A Where SECOND_A.ID = RESULTS74a.ID);
COMMIT;
drop table "MARTIR03"."UNION3";
drop table "MARTIR03"."RESULTS74";
drop table "MARTIR03"."RESULTS75";
--up to here

CREATE TABLE RESULTS76 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
SECOND_A.ADD_NUM as in_num2,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||POST_TOWN) as score,
  UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
--AND UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||POST_TOWN)>0.9
--AND ad_base.ADDRESS_LINE_2=TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') )
AND AD_BASE.WORD_ONE=SECOND_A.WORD_ONE
AND UTL_MATCH.JARO_WINKLER(AD_BASE.WORD_TWO,SECOND_A.WORD_TWO)>0.8
AND UTL_MATCH.JARO_WINKLER(AD_BASE.DESCRIPTION,TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','')))>0.8;

UPDATE results76 SET STAGE= '75';

CREATE TABLE RESULTS75a AS SELECT DISTINCT ID,in_num,in_num2,add_num,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,str_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN,in_num,in_num2,add_num, ADDRESS_STRING, STR_SCORE,ADDRESS_STRING_NOPC, SCORE,
mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
mAX(STR_SCORE) OVER (PARTITION BY ID) AS MAX_STR_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM results76)
WHERE SCORE = MAX_SCORE AND STR_SCORE=MAX_STR_SCORE
and add_num=trim(in_num) or add_num=trim(in_num2)
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS75a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS75a Where SECOND_A.ID = RESULTS75a.ID);
COMMIT;

CREATE TABLE RESULTS77 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
SECOND_A.ADD_NUM as in_num2,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||POST_TOWN) as score,
  UTL_MATCH.jaro_winkler(TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') ),ad_base.ABBR_STREET1) as str_score,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
--AND UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||POST_TOWN)>0.8
--AND ad_base.ADDRESS_LINE_2=TRIM(regexp_REPLACE(second_a.CURRENT_LINE1, '+[0-9]','') )
AND AD_BASE.WORD_ONE=SECOND_A.WORD_ONE
AND UTL_MATCH.JARO_WINKLER(AD_BASE.WORD_TWO,SECOND_A.WORD_TWO)>0.8
AND UTL_MATCH.JARO_WINKLER(AD_BASE.WORD_THREE,SECOND_A.WORD_THREE)>0.8
AND UTL_MATCH.JARO_WINKLER(AD_BASE.DESCRIPTION,TRIM(regexp_REPLACE(second_a.CURRENT_LINE2, '+[0-9]','')))>0.8;

UPDATE RESULTS77 SET STAGE= '77';

CREATE TABLE RESULTS76a AS SELECT DISTINCT ID,in_num,in_num2,add_num,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,str_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN,in_num,in_num2,add_num, ADDRESS_STRING, STR_SCORE,ADDRESS_STRING_NOPC, SCORE,
mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
mAX(STR_SCORE) OVER (PARTITION BY ID) AS MAX_STR_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS77)
WHERE SCORE = MAX_SCORE AND STR_SCORE=MAX_STR_SCORE
and add_num=trim(in_num) or add_num=trim(in_num2)
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS76a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS76a Where SECOND_A.ID = RESULTS76a.ID);
COMMIT;

drop table "MARTIR03"."RESULTS76";
drop table "MARTIR03"."RESULTS77";

CREATE TABLE RESULTS78 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
SECOND_A.ADD_NUM as in_num2,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
ad_base.build_no,
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  UTL_MATCH.edit_distance(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_STRING_NOPC) as score,
  second_a.range_lower,
  second_a.range_upper,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
--AND UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||POST_TOWN)>0.8
and instr(second_a.address_string,ad_base.abbr_street1,1,1)>0
AND ad_base.build_no between second_a.range_lower and second_a.range_upper
--AND MOD ( second_a.range_lower,2) = MOD(AD_BASE.BUILD_NO,2)
AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.ADD_STRING_WORKING,1,1)>0;

CREATE TABLE RESULTS78_2 AS SELECT
SECOND_A.ID,
SECOND_A.STAGE,
SECOND_A.ADDRESS_STRING,
SECOND_A.ADD_NUM as in_num,
SECOND_A.ADD_NUM as in_num2,
ad_base.address_line_1,
ad_base.address_line_2,
second_a.current_line1,
ad_base.ADD_NUM, 
ad_base.build_no,
  ad_base.UPRN,
  ad_base.PARENT_UPRN,
  ad_base.ADDRESS_STRING_NOPC,
  UTL_MATCH.edit_distance(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_STRING_NOPC) as score,
  second_a.range_lower,
  second_a.range_upper,
  ad_base.ABBR_STREET1
FROM SECOND_A,ad_base
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
--AND UTL_MATCH.jaro_winkler(SECOND_A.ADDRESS_STRING,ad_base.ADDRESS_LINE_1||' '||POST_TOWN)>0.8
and instr(second_a.address_string,ad_base.abbr_street1,1,1)>0
AND ad_base.build_no between second_a.range_lower2 and second_a.range_upper2
--AND MOD ( second_a.range_lower,2) = MOD(AD_BASE.BUILD_NO,2)
AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.ADD_STRING_WORKING,1,1)>0;

UPDATE RESULTS78 SET STAGE= '78';
UPDATE RESULTS78_2 SET STAGE= '78';

CREATE TABLE union4 AS 
select * from results78
union 
select * from results78_2;

drop table "MARTIR03"."RESULTS78";
drop table "MARTIR03"."RESULTS78_2";

CREATE TABLE RESULTS78a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,
mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM union4)
WHERE SCORE = MAX_SCORE 
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;

ALTER TABLE RESULTS78a COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS78a Where SECOND_A.ID = RESULTS78a.ID);
COMMIT;

drop table "MARTIR03"."UNION4";

CREATE TABLE RESULTS79 AS SELECT
ID,
SECOND_A.STAGE,
ad_base.UPRN,
ad_base.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
SECOND_A.ADDRESS_STRING,
substr(SECOND_A.ADDRESS_STRING,greatest(-length(AD_BASE.ADDRESS_STRING_NOPC)),length( SECOND_A.ADDRESS_STRING))  AS TEST,
TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, '[A-Z]','')) AS TEST_NUM,
UTL_MATCH.JARO_WINKLER(SECOND_A.ADDRESS_STRING,substr(SECOND_A.ADDRESS_STRING,-length(AD_BASE.ADDRESS_STRING_NOPC),length( SECOND_A.ADDRESS_STRING)) ) AS SCORE
FROM SECOND_A, AD_BASE
WHERE ad_base.h3_10=SECOND_A.H3_10_p 
AND TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, '[A-Z]','') )=AD_BASE.ADD_NUM
AND INSTR(AD_BASE.ADDRESS_STRING_NOPC,SECOND_A.ADD_STRING_WORKING,1,1)>0;

UPDATE RESULTS79 SET STAGE= '79';

CREATE TABLE RESULTS79a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,
mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS79)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS79a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS79a Where SECOND_A.ID = RESULTS79a.ID);
COMMIT;

drop table "MARTIR03"."RESULTS79";

CREATE TABLE RESULTS80 AS SELECT
ID,
SECOND_A.STAGE,
ad_base.UPRN,
ad_base.PARENT_UPRN,
AD_BASE.ADDRESS_LINE_1,
AD_BASE.ADDRESS_STRING_NOPC,
SECOND_A.ADDRESS_STRING,
substr(SECOND_A.ADDRESS_STRING,greatest(-length(AD_BASE.ADDRESS_STRING_NOPC)),length( SECOND_A.ADDRESS_STRING))  AS TEST,
TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, '[A-Z]','')) AS TEST_NUM,
UTL_MATCH.JARO_WINKLER(SECOND_A.ADDRESS_STRING,substr(SECOND_A.ADDRESS_STRING,-length(AD_BASE.ADDRESS_STRING_NOPC),length( SECOND_A.ADDRESS_STRING)) ) AS SCORE
FROM SECOND_A, AD_BASE
WHERE ad_base.h3_7=SECOND_A.H3_7_p 
and length(ad_base.address_line_1)>4
AND INSTR(SECOND_A.ADD_STRING_WORKING,AD_BASE.ADDRESS_LINE_1,1,1)>0;

UPDATE RESULTS80 SET STAGE= '80';

CREATE TABLE RESULTS80a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,
mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS80)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS80a
COMPRESS;

DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS80a Where SECOND_A.ID = RESULTS80a.ID);
COMMIT;

drop table "MARTIR03"."RESULTS80";

CREATE TABLE RESULTS81 AS SELECT
ID,
SECOND_A.STAGE,
ad_base.UPRN,
ad_base.PARENT_UPRN,
SECOND_A.ADD_STRING_working,
ad_base.build_no,second_a.build_no as build_in,
AD_BASE.ADDRESS_STRING_NOPC,
SECOND_A.ADDRESS_STRING,
substr(SECOND_A.ADDRESS_STRING,greatest(-length(AD_BASE.ADDRESS_STRING_NOPC)),length( SECOND_A.ADDRESS_STRING))  AS TEST,
TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, '[A-Z]','')) AS TEST_NUM,
--UTL_MATCH.JARO_WINKLER(SECOND_A.ADDRESS_STRING,substr(SECOND_A.ADDRESS_STRING,-length(AD_BASE.ADDRESS_STRING_NOPC),length( SECOND_A.ADDRESS_STRING)) ) 
UTL_MATCH.JARO_WINKLER(SECOND_A.ADD_STRING_working,substr(SECOND_A.ADDRESS_STRING,-length(AD_BASE.ADDRESS_STRING_NOPC),length( SECOND_A.ADDRESS_STRING)) )AS SCORE
FROM SECOND_A, AD_BASE
WHERE ad_base.h3_6=SECOND_A.H3_6_p 
and ad_base.build_no=second_a.build_no 
--or second_a.build_no BETWEEN AD_BASE.range_lower and ad_base.range_upper)
and instr(second_a.address_string,ad_base.description,1,1)>0 
--AND instr(AD_BASE.ADDRESS_string_nopc,SECOND_A.word_two,1,1)>0
--and instr(AD_BASE.ADDRESS_string_nopc,trim(SECOND_A.word_two),1,1)>0
and UTL_MATCH.JARO_WINKLER(SECOND_A.ADD_STRING_working,substr(SECOND_A.ADDRESS_STRING,-length(AD_BASE.ADDRESS_STRING_NOPC),length( SECOND_A.ADDRESS_STRING)) )>0.61;
 --and instr(second_a.current_line3,ad_base.post_town,1,1)>0;
 
 UPDATE RESULTS81 SET STAGE= '81';

CREATE TABLE RESULTS81a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,
mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS81)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS81a
COMPRESS;

 DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS81a Where SECOND_A.ID = RESULTS81a.ID);
COMMIT;

drop table "MARTIR03"."RESULTS81";


CREATE TABLE RESULTS82 AS SELECT
ID,
SECOND_A.STAGE,
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
SECOND_A.ADDRESS_STRING,
substr(SECOND_A.ADDRESS_STRING,greatest(-length(AD_BASE.ADDRESS_STRING_NOPC)),length( SECOND_A.ADDRESS_STRING))  AS TEST,
TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, '[A-Z]','')) AS TEST_NUM,
UTL_MATCH.JARO_WINKLER(SECOND_A.ADDRESS_STRING,substr(SECOND_A.ADDRESS_STRING,-length(AD_BASE.ADDRESS_STRING_NOPC),length( SECOND_A.ADDRESS_STRING)) ) AS SCORE
FROM SECOND_A, AD_BASE
WHERE  SECOND_A.H3_8_p=AD_BASE.h3_8
--AND UTL_MATCH.JARO_WINKLER(SECOND_A.ADDRESS_STRING,substr(SECOND_A.ADDRESS_STRING,-length(AD_BASE.ADDRESS_STRING_NOPC),length( SECOND_A.ADDRESS_STRING)) ) >0.7
AND INSTR(second_a.ADDRESS_STRING,AD_BASE.abbr_street1,1,1)>0
AND instr(AD_BASE.address_string_nopc,second_a.add_string_working,1,1)>0
and length(ad_base.build_no)=length(second_a.build_no)
AND ((instr(AD_BASE.address_string_nopc,TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, '[A-Z]','')),1,1)>0) or (ad_base.build_no between second_a.range_lower and second_a.range_upper)
or (second_a.build_no between ad_base.range_lower and ad_base.range_upper));


UPDATE RESULTS82 SET STAGE= 82;

CREATE TABLE RESULTS82a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,
mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS82)
WHERE SCORE = MAX_SCORE 
AND COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS82a
COMPRESS;

 DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS82a Where SECOND_A.ID = RESULTS82a.ID);
COMMIT;

drop table "MARTIR03"."RESULTS82";

CREATE TABLE RESULTS83 AS SELECT
ID,
SECOND_A.STAGE,
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
SECOND_A.ADDRESS_STRING,
SECOND_A.CURRENT_LINE3,
substr(SECOND_A.ADDRESS_STRING,greatest(-length(AD_BASE.ADDRESS_STRING_NOPC)),length( SECOND_A.ADDRESS_STRING))  AS TEST,

substr(SECOND_A.ADDRESS_STRING,greatest(-length(SECOND_A.ADDRESS_STRING)),length( SECOND_A.CURRENT_LINE3))  AS CUTOFF3,

TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, '[A-Z]','')) AS TEST_NUM,
TRIM(regexp_REPLACE(second_a.ADDRESS_STRING, second_a.SUB_UNIT,'')) AS NO_NAME,
regexp_replace(AD_BASE.ABBR_STREET1, '(((\w+)\s){1}).*', '\1'  ) AS STR_ONE,
UTL_MATCH.JARO_WINKLER(SECOND_A.ADDRESS_STRING,substr(SECOND_A.ADDRESS_STRING,-length(AD_BASE.ADDRESS_STRING_NOPC),length( SECOND_A.ADDRESS_STRING)) ) AS SCORE
FROM SECOND_A, AD_BASE
WHERE  SECOND_A.H3_8_p=AD_BASE.h3_8--and (length(ad_base.build_no) = length(second_a.range_lower2) or length(ad_base.build_no) = length(second_a.range_upper2))
and (second_a.build_no BETWEEN  ad_base.range_lower2 AND ad_base.range_upper2 
OR AD_BASE.build_no=TO_CHAR(Second_a.range_upper) 
OR AD_BASE.build_no=TO_CHAR(Second_a.range_LOWer) )
AND INSTR(SECOND_A.ADDRESS_STRING,regexp_replace(AD_BASE.ABBR_STREET1, '(((\w+)\s){1}).*', '\1'  ),1,1)>0
AND INSTR(SECOND_A.ADDRESS_STRING,regexp_replace(AD_BASE.ABBR_STREET1, '(((\w+)\s){2}).*', '\1'  ),1,1)>0;
--83 not finished partion by lat n long?

UPDATE RESULTS83 SET STAGE= 83;

CREATE TABLE RESULTS83a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,
--mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN
FROM RESULTS83)
WHERE 
--SCORE = MAX_SCORE 
 COUNT_P_UPRN =1
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS83a
COMPRESS;

 DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS83a Where SECOND_A.ID = RESULTS83a.ID);
COMMIT;

drop table "MARTIR03"."RESULTS83";

CREATE TABLE RESULTS84 AS SELECT
ID,
SECOND_A.STAGE,
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
SECOND_A.ADDRESS_STRING,
substr(second_a.address_string, REGEXP_inSTR(Second_a.address_string,'[0-9]+') ,length(Second_a.address_string))as test1,
UTL_MATCH.JARO_WINKLER(substr(second_a.address_string, REGEXP_inSTR(Second_a.address_string,'[0-9]+') ),AD_BASE.ADDRESS_STRING_NOPC ) as score
FROM SECOND_A, AD_BASE
WHERE  SECOND_A.H3_6_p=AD_BASE.h3_6
and UTL_MATCH.JARO_WINKLER(substr(second_a.address_string, REGEXP_inSTR(Second_a.address_string,'[0-9]+') ),AD_BASE.ADDRESS_STRING_NOPC ) >0.6

and (second_a.build_no BETWEEN  ad_base.range_lower2 AND ad_base.range_upper2 
or AD_BASE.BUILD_NO BETWEEN SECOND_A.RANGE_LOWER AND SECOND_A.RANGE_UPPER
OR AD_BASE.build_no=TO_CHAR(Second_a.range_upper) 
OR AD_BASE.build_no=TO_CHAR(Second_a.range_LOWer) )
AND INSTR(SECOND_A.ADDRESS_STRING,regexp_replace(AD_BASE.ABBR_STREET1, '(((\w+)\s){1}).*', '\1'  ),1,1)>0
AND INSTR(SECOND_A.ADDRESS_STRING,regexp_replace(AD_BASE.ABBR_STREET1, '(((\w+)\s){2}).*', '\1'  ),1,1)>0;

UPDATE RESULTS84 SET STAGE= 84;

CREATE TABLE RESULTS84a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,
mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY ADDRESS_STRING_NOPC) AS COUNT_ADDRESS_STRING_NOPC
FROM RESULTS84)
WHERE 
SCORE = MAX_SCORE 
and ( COUNT_P_UPRN =1 or COUNT_ADDRESS_STRING_NOPC=1)
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS84a
COMPRESS;

 DELETE FROM SECOND_A
WHERE EXISTS( SELECT id FROM RESULTS84a Where SECOND_A.ID = RESULTS84a.ID);
COMMIT;

drop table "MARTIR03"."RESULTS84";

CREATE TABLE RESULTS85 AS SELECT
ID,
SECOND_A.STAGE,
AD_BASE.UPRN,
AD_BASE.PARENT_UPRN,
AD_BASE.ADDRESS_STRING_NOPC,
SECOND_A.ADDRESS_STRING,
substr(second_a.address_string, REGEXP_inSTR(Second_a.address_string,'[0-9]+') ,length(Second_a.address_string))as test1,
UTL_MATCH.JARO_WINKLER(substr(second_a.address_string, REGEXP_inSTR(Second_a.address_string,'[0-9]+') ),AD_BASE.ADDRESS_STRING_NOPC ) as score
FROM SECOND_A, AD_BASE
WHERE  SECOND_A.H3_8_p=AD_BASE.h3_8
and UTL_MATCH.JARO_WINKLER(TRIM(substr(second_a.address_string, REGEXP_inSTR(Second_a.address_string,'[0-9]+') )),AD_BASE.ADDRESS_STRING_NOPC ) >0.88

and 
(second_a.build_no BETWEEN  ad_base.range_lower2 AND ad_base.range_upper2 
OR AD_BASE.BUILD_NO BETWEEN SECOND_A.RANGE_LOWER AND SECOND_A.RANGE_UPPER
OR AD_BASE.build_no=TO_CHAR(Second_a.range_upper) 
OR AD_BASE.build_no=TO_CHAR(Second_a.range_LOWer) );

UPDATE RESULTS85 SET STAGE= 85;

CREATE TABLE RESULTS85a AS SELECT DISTINCT ID,STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC,SCORE,MAX_SCORE,COUNT_P_UPRN FROM(
SELECT ID, STAGE,UPRN,PARENT_UPRN, ADDRESS_STRING, ADDRESS_STRING_NOPC, SCORE,
mAX(SCORE) OVER (PARTITION BY ID) AS MAX_SCORE,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY PARENT_UPRN) AS COUNT_P_UPRN,
DENSE_RANK() OVER(PARTITION BY ID ORDER BY ADDRESS_STRING_NOPC) AS COUNT_ADDRESS_STRING_NOPC
FROM RESULTS85)
WHERE 
SCORE = MAX_SCORE 
and ( COUNT_P_UPRN =1 or COUNT_ADDRESS_STRING_NOPC=1)
ORDER BY ID, ADDRESS_STRING, ADDRESS_STRING_NOPC;
ALTER TABLE RESULTS85a
COMPRESS;

 
drop table "MARTIR03"."RESULTS85";
--AND INSTR(TRIM(SECOND_A.ADDRESS_STRING),regexp_replace(AD_BASE.ABBR_STREET1, '(((\w+)\s){1}).*', '\1'  ),1,1)>0
--AND INSTR(SECOND_A.ADDRESS_STRING,regexp_replace(AD_BASE.ABBR_STREET1, '(((\w+)\s){2}).*', '\1'  ),1,1)>0;
-- olde method floor/apartment - new 0-1500
-- stumped you just have ot know this sort of thing.

--addresses expressed as a range 117-120 new street but incoming == 118 new street
--possiblyt use coordinates to aggregate a match

--swamped by too much sub unit noise on incomgin for addressbase reference 
---match from right hand side possibly

--TOWER BLOCK / name NUMBERING CHANGES
--140 CHARLES STREET = LOMOND HOUSE
--150 CHARLES STREET = NEVIS HOUSE
--160 CHARLES STREET = CAMPSIE HOUSE
---------------------------------------
         --aggregate results--
---------------------------------------
--CREATE MATERIALIZED VIEW seeded_result
--BUILD IMMEDIATE
--REFRESH FORCE


CREATE TABLE UPRNSEEDING
AS
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from resultsa
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results1a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results2a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results3a
union
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results3aa
union
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results4a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results5a 
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results6a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results7a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results8a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results9a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from resultS10a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results11a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from resultS12a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from resultS13a
union
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results14a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results15a
union 
select ID,STAGE,UPRN, parent_uprn , ADDRESS_STRING, ADDRESS_STRING_NOPC from results16a
union  
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results17a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results18a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results19a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results20a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results21a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results22a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results23a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results24a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results25a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results26a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results27a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results28a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results29a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results30a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results31a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results32a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results33a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results34a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results35a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results36a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results37a
union 
--select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results38a
--union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results39a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results40a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results41a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results42a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results43a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results44a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results45a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results46a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results47a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results48a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results49a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results50a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results51a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results52a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results53a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results54a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results55a
union 
--select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results57a
--union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results58a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results59a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results60a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results61a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results62a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results63a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results64a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results65a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results66a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results67a
union 
--select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results68a
--union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results69a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results70a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results71a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results72a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results73a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results74a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results75a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results76a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results78a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results79a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results80a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results81a
union 
select ID,STAGE,UPRN, parent_uprn, ADDRESS_STRING, ADDRESS_STRING_NOPC from results82a
order by STAGE,parent_uprn,uprn;


SELECT DISTINCT ID FROM UPRNSEEDING

SELECT DISTINCT ID FROM uprn_inc_names

SELECT TABLE_NAME FROM all_tables WHERE owner = 'MARTIR03' and table_name like 'RESULTS%' ;

CREATE TABLE stats AS SELECT table_name, num_rows as no_rows 
FROM all_tables WHERE owner = 'MARTIR03' and instr(table_name,'RESULTS',1,1)>0 AND NUM_ROWS>0;

---reset--
drop table "MARTIR03"."RESULTS_TEST3A";
drop table "MARTIR03"."RESULTS_TEST4A";
drop table "MARTIR03"."RESULTS_TEST11A";
drop table "MARTIR03"."RESULTS_TEST5A";
drop table "MARTIR03"."RESULTS_TEST7A";
drop table "MARTIR03"."RESULTS_TEST8A";
drop table "MARTIR03"."RESULTS_TEST9A";
drop table "MARTIR03"."RESULTS57A";
drop table "MARTIR03"."RESULTS58";
drop table "MARTIR03"."RESULTS58A";
drop table "MARTIR03"."RESULTS59A";
drop table "MARTIR03"."RESULTS60A";
drop table "MARTIR03"."RESULTS61A";
drop table "MARTIR03"."RESULTS62";

drop table "MARTIR03"."RESULTS10A";
drop table "MARTIR03"."RESULTS10B";
drop table "MARTIR03"."RESULTS11A";
drop table "MARTIR03"."RESULTS12A";
drop table "MARTIR03"."RESULTS13A";
drop table "MARTIR03"."RESULTS14A";
drop table "MARTIR03"."RESULTS15A";
drop table "MARTIR03"."RESULTS16A";
drop table "MARTIR03"."RESULTS17";
drop table "MARTIR03"."RESULTS17A";
drop table "MARTIR03"."RESULTS18A";
drop table "MARTIR03"."RESULTS19A";
drop table "MARTIR03"."RESULTS1A";
drop table "MARTIR03"."RESULTS20A";
drop table "MARTIR03"."RESULTS21A";
drop table "MARTIR03"."RESULTS22A";
drop table "MARTIR03"."RESULTS23A";
drop table "MARTIR03"."RESULTS24A";
drop table "MARTIR03"."RESULTS25A";
drop table "MARTIR03"."RESULTS26A";
drop table "MARTIR03"."RESULTS27A";
drop table "MARTIR03"."RESULTS28A";
drop table "MARTIR03"."RESULTS29A";
drop table "MARTIR03"."RESULTS2A";
drop table "MARTIR03"."RESULTS30A";
drop table "MARTIR03"."RESULTS31A";
drop table "MARTIR03"."RESULTS32";
drop table "MARTIR03"."RESULTS32A";
drop table "MARTIR03"."RESULTS33";
drop table "MARTIR03"."RESULTS33A";
drop table "MARTIR03"."RESULTS34A";
drop table "MARTIR03"."RESULTS35A";
drop table "MARTIR03"."RESULTS36A";
drop table "MARTIR03"."RESULTS37A";
drop table "MARTIR03"."RESULTS38A";
drop table "MARTIR03"."RESULTS39A";
drop table "MARTIR03"."RESULTS40A";
drop table "MARTIR03"."RESULTS41A";
drop table "MARTIR03"."RESULTS42A";
drop table "MARTIR03"."RESULTS43";
drop table "MARTIR03"."RESULTS43A";
drop table "MARTIR03"."RESULTS44A";
drop table "MARTIR03"."RESULTS45A";
drop table "MARTIR03"."RESULTS46A";
drop table "MARTIR03"."RESULTS47A";
drop table "MARTIR03"."RESULTS48A";
drop table "MARTIR03"."RESULTS49A";
drop table "MARTIR03"."RESULTS50A";
drop table "MARTIR03"."RESULTS51A";
drop table "MARTIR03"."RESULTS52A";
drop table "MARTIR03"."RESULTS53A";
drop table "MARTIR03"."RESULTS54A";
drop table "MARTIR03"."RESULTS55A";

drop table "MARTIR03"."RESULTS55B";
drop table "MARTIR03"."RESULTS55C";
drop table "MARTIR03"."RESULTS55D";
drop table "MARTIR03"."RESULTS55E";

drop table "MARTIR03"."RESULTS56A";
drop table "MARTIR03"."RESULTS3A";
drop table "MARTIR03"."RESULTS3AA";
drop table "MARTIR03"."RESULTS4A";
drop table "MARTIR03"."RESULTS5A";
drop table "MARTIR03"."RESULTS6A";
drop table "MARTIR03"."RESULTS7A";
drop table "MARTIR03"."RESULTS8A";
drop table "MARTIR03"."RESULTS9A";
drop table "MARTIR03"."RESULTSA";
drop table "MARTIR03"."RESULTS1I";
drop table "MARTIR03"."RESULTS1II";
drop table "MARTIR03"."RESULTS41";
drop table "MARTIR03"."SECOND_A";
drop table "MARTIR03"."RESULTS_NEIGH1";
drop table "MARTIR03"."RESULTS_NEIGH2";
drop table "MARTIR03"."RESULTS_NEIGH3";
drop table "MARTIR03"."TEST";
drop table "MARTIR03"."RESULTS42_2";
drop table "MARTIR03"."RESULTS42_3";
drop table "MARTIR03"."RESULTS57";
drop table "MARTIR03"."RESULTS62A";
drop table "MARTIR03"."RESULTS63A";
drop table "MARTIR03"."RESULTS64A";
drop table "MARTIR03"."RESULTS65A";
drop table "MARTIR03"."RESULTS66A";
drop table "MARTIR03"."RESULTS67A";
--drop table "MARTIR03"."RESULTS68A";
drop table "MARTIR03"."RESULTS69A";
drop table "MARTIR03"."RESULTS70A";
drop table "MARTIR03"."RESULTS71A";
drop table "MARTIR03"."RESULTS72A";
drop table "MARTIR03"."RESULTS73A";
drop table "MARTIR03"."RESULTS74A";
drop table "MARTIR03"."RESULTS76A";
drop table "MARTIR03"."RESULTS75A";
drop table "MARTIR03"."RESULTS78A";
drop table "MARTIR03"."RESULTS79A";
drop table "MARTIR03"."RESULTS80A";
drop table "MARTIR03"."RESULTS81A";